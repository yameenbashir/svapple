
-- AUTHOR : Team(DOWHILE)
-- CREATION DATE : 31-DEC-2016
-- UPDATION DATE : 12-MARCH-2017
DROP DATABASE IF EXISTS ecom;
CREATE DATABASE ecom;
USE `ecom`;
DROP TABLE IF EXISTS `role`;
CREATE TABLE role(
  ROLE_ID INT NOT NULL AUTO_INCREMENT,
  DESCRIPTION VARCHAR(256) NOT NULL,
  ACTION_TYPE VARCHAR(256) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  
  CONSTRAINT `ROLE_ROLE_ID_PK` PRIMARY KEY (`ROLE_ID`)
  
);
DROP TABLE IF EXISTS `currency`;
CREATE TABLE currency(
  CURRENCY_ID INT NOT NULL AUTO_INCREMENT,
  CURRENCY_NAME VARCHAR(256) NOT NULL,
  CURRENCY_VALUE VARCHAR(256) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  
  CONSTRAINT `CURRENCY_CURRENCY_ID_PK` PRIMARY KEY (`CURRENCY_ID`)
  
);

DROP TABLE IF EXISTS `time_zone`;
CREATE TABLE time_zone(
  TIME_ZONE_ID INT NOT NULL AUTO_INCREMENT,
  TIME_ZONE_VALUE VARCHAR(256) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  
  CONSTRAINT `TIME_ZONE_TIME_ZONE_ID_PK` PRIMARY KEY (`TIME_ZONE_ID`)
  
);

DROP TABLE IF EXISTS `printer_format`;
CREATE TABLE printer_format(
  PRINTER_FORMAT_ID INT NOT NULL AUTO_INCREMENT,
  PRINTER_FORMAT_VALUE VARCHAR(256) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
--  COMPANY_ASSOCIATION_ID INT NOT NULL,
-- CONSTRAINT `PRINTER_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),

  CONSTRAINT `PRINTER_FORMAT_PRINTER_FORMAT_ID_PK` PRIMARY KEY (`PRINTER_FORMAT_ID`)
  
);

DROP TABLE IF EXISTS `company`;
CREATE TABLE company(
	COMPANY_ID INT NOT NULL AUTO_INCREMENT,
	COMPANY_NAME VARCHAR (256) NOT NULL,
	DISPLAY_PRICES VARCHAR (256),
	SKU_GENERATION VARCHAR (256),
	CURRENT_SEQUENCE_NUMBER VARCHAR (256),
	LOYALTY_ENABLED BIT (1),
	LOYALTY_INVOICE_AMOUNT DECIMAL (20,2),
	LOYALTY_AMOUNT DECIMAL (20,2),
	LOYALTY_ENABLED_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
	LOYALTY_BONUS_AMOUNT DECIMAL (20,2),
	LOYALTY_BONUS_ENABLED BIT (1),
	LOYALTY_BONUS_ENABLED_DATE TIMESTAMP,
	USER_SWITCH_SECURITY VARCHAR (256),
	ENABLE_STORES_CREDIT VARCHAR (256) NOT NULL,
	URL VARCHAR (100) NULL,
	ACTIVE_INDICATOR BIT (1) DEFAULT b'1',
	CREATED_DATE TIMESTAMP NOT NULL  ,
	LAST_UPDATED TIMESTAMP NOT NULL  ,
	CREATED_BY INT,
	UPDATED_BY INT,
	PRINTER_ASSOCICATION_ID INT,
	CURRENCY_ASSOCICATION_ID INT,
	TIME_ZONE_ASSOCICATION_ID INT,
	
	CONSTRAINT COMPANY_CURRENCY_ASSOCICATION_ID_FK FOREIGN KEY (CURRENCY_ASSOCICATION_ID) REFERENCES currency (CURRENCY_ID),
	CONSTRAINT COMPANY_PRINTER_ASSOCICATION_ID_FK FOREIGN KEY (PRINTER_ASSOCICATION_ID) REFERENCES printer_format (PRINTER_FORMAT_ID),
	CONSTRAINT COMPANY_TIME_ZONE_ASSOCICATION_ID_FK FOREIGN KEY (TIME_ZONE_ASSOCICATION_ID) REFERENCES time_zone (TIME_ZONE_ID),
	CONSTRAINT `COMPANY_COMPANY_ID_PK` PRIMARY KEY (`COMPANY_ID`)
);

DROP TABLE IF EXISTS `menu`;
CREATE TABLE menu(
  MENU_ID INT NOT NULL AUTO_INCREMENT,
  MENU_NAME VARCHAR(256) NOT NULL,
  ROLE_ASSOCIATION_ID INT NOT NULL,
  ACTION_TYPE VARCHAR(100) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `MENU_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT MENU_ROLE_ASSOCIATION_ID_FK FOREIGN KEY (ROLE_ASSOCIATION_ID) REFERENCES role (ROLE_ID),
  CONSTRAINT `MENU_MENU_ID_PK` PRIMARY KEY (`MENU_ID`)
);



DROP TABLE IF EXISTS `country` ;

CREATE TABLE IF NOT EXISTS country (
  COUNTRY_ID INT NOT NULL AUTO_INCREMENT,
  COUNTRY_NAME VARCHAR(200) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  CONSTRAINT `COUNTRY_COUNTRY_ID_PK` PRIMARY KEY (`COUNTRY_ID`)
);


DROP TABLE IF EXISTS `contact_group` ;

CREATE TABLE IF NOT EXISTS contact_group (
  CONTACT_GROUP_ID INT NOT NULL AUTO_INCREMENT,
  CONTACT_GROUP_NAME VARCHAR(200) NOT NULL,
  COUNTRY_ASSOCICATION_ID INT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `CONTACT_GROUP_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `CONTACT_GROUP_CONTACT_GROUP_ID_PK` PRIMARY KEY (`CONTACT_GROUP_ID`),
  CONSTRAINT `CONTACT_GROUP_COUNTRY_ASSOCICATION_ID_FK` FOREIGN KEY (`COUNTRY_ASSOCICATION_ID`)REFERENCES country (`COUNTRY_ID`)
 );

DROP TABLE IF EXISTS `contact` ;

CREATE TABLE IF NOT EXISTS contact (
  CONTACT_ID INT NOT NULL AUTO_INCREMENT,
  CONTACT_NAME VARCHAR(200) NOT NULL,
  DOB DATE ,
  GENDER VARCHAR(10) ,
  CONTACT_CODE VARCHAR(200),
  FIRST_NAME VARCHAR(200) ,
  LAST_NAME VARCHAR(200) ,
  DEFAULT_MARKUP DECIMAL(5,2) NULL,
  CONTACT_BALANCE DECIMAL(20,5) NULL,
  DESCRIPTION VARCHAR(1000) NULL,
  LOYALTY_ENABLED VARCHAR(10) NULL,
  COMPANY_NAME VARCHAR(100) NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CONTACT_OUTLET_ID INT,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONTACT_GROUP_ASSOCIATION_ID INT NULL,
  CONSTRAINT `CONTACT_CONTACT_GROUP_ASSOCIATION_ID_FK` FOREIGN KEY (`CONTACT_GROUP_ASSOCIATION_ID`) REFERENCES contact_group (`CONTACT_GROUP_ID`),
  CONSTRAINT `CONTACT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `CONTACT_CONTACT_ID_PK` PRIMARY KEY (`CONTACT_ID`)
);

DROP TABLE IF EXISTS `contact_payments_type` ;

CREATE TABLE IF NOT EXISTS contact_payments_type (
  CONTACT_PAYMENT_TYPE_ID INT NOT NULL AUTO_INCREMENT,
  CONTACT_PAYMENT_TYPE_NAME VARCHAR(200) NOT NULL ,
   CONSTRAINT `CONTACT_PAYMENT_TYPE_ID_PK` PRIMARY KEY (`CONTACT_PAYMENT_TYPE_ID`)
  );

DROP TABLE IF EXISTS `contact_payments` ;

CREATE TABLE contact_payments (
  CONTACT_PAYMENT_ID INT NOT NULL AUTO_INCREMENT,
  CONTACT_NAME VARCHAR(200) NOT NULL,
  PAYMENT_AMOUNT DECIMAL(20,5) NULL,
  CONTACT_BALANCE DECIMAL(20,5) NULL,
  PAYMENT_CASH DECIMAL(20,5) NULL,
  PAYMENT_CREDIT_CARD DECIMAL(20,5) NULL,
  PAYMENT_OTHER_TYPE DECIMAL(20,5) NULL,
  CONTACT_NEW_BALANCE DECIMAL(20,5) NULL,
  DESCRIPTION VARCHAR(1000) NULL,
  PAYMENT_REF_NUM VARCHAR(100) NULL,
  ORDER_REF_NUM VARCHAR(100) NULL,
  ADJUSTMENT_TYPE VARCHAR(100) NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONTACT_ASSOCICATION_ID INT,
  CONTACT_PAYMENT_TYPE_ASSOCICATION_ID INT,
  CONSTRAINT `CONTACT_PAYMENT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT CONTACT_PAYMENT_CONTACT_ASSOCICATION_ID_FK FOREIGN KEY (CONTACT_ASSOCICATION_ID) REFERENCES contact (CONTACT_ID),
  CONSTRAINT CONTACT_PAYMENT_TYPE_ASSOCICATION_ID_FK FOREIGN KEY (CONTACT_PAYMENT_TYPE_ASSOCICATION_ID) REFERENCES contact_payments_type (CONTACT_PAYMENT_TYPE_ID),
  CONSTRAINT `CONTACT_CONTACT_PAYMENT_ID_PK` PRIMARY KEY (`CONTACT_PAYMENT_ID`)
);
  
DROP TABLE IF EXISTS `address`;
CREATE TABLE address
	(
	ADDRESS_ID               INT NOT NULL auto_increment,
	ADDRESS_TYPE             VARCHAR (100) NOT NULL,
	CONTACT_NAME             VARCHAR (256),
	FIRST_NAME               VARCHAR (256),
	LAST_NAME                VARCHAR (256),
	EMAIL                    VARCHAR (256),
	PHONE                    VARCHAR (256),
	FAX                      VARCHAR (45),
	WEBSITE                  VARCHAR (256),
	TWITTER                  VARCHAR (256),
	STREET                   VARCHAR (256),
	SUBURB                   VARCHAR (256),
	CITY                     VARCHAR (256),
	POSTAL_CODE              VARCHAR (256),
	STATE                    VARCHAR (256),
	COUNTY                   VARCHAR (256),
	X_COORDINATE             VARCHAR (256) DEFAULT 0,
	Y_COORDINATE             VARCHAR (256) DEFAULT 0,
	ACTIVE_INDICATOR         BIT (1) NOT NULL,
	CREATED_DATE             TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LAST_UPDATED             TIMESTAMP NOT NULL,
	CREATED_BY               INT,
	UPDATED_BY               INT,
	CONTACT_ASSOCICATION_ID INT,
	COUNTRY_ASSOCICATION_ID  INT,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
  	CONSTRAINT `ADDRESS_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT ADDRESS_COUNTRY_ASSOCICATION_ID_FK FOREIGN KEY (COUNTRY_ASSOCICATION_ID) REFERENCES country (COUNTRY_ID),
	CONSTRAINT ADDRESS_CONTACT_ASSOCICATION_ID_FK FOREIGN KEY (CONTACT_ASSOCICATION_ID) REFERENCES contact (CONTACT_ID),
	CONSTRAINT `ADDRESS_ADDRESS_ID_PK`  PRIMARY KEY (ADDRESS_ID)
	);


DROP TABLE IF EXISTS `sales_tax` ;

CREATE TABLE IF NOT EXISTS sales_tax (
  SALES_TAX_ID INT NOT NULL AUTO_INCREMENT,
  SALES_TAX_NAME VARCHAR(100) NULL,
  SALES_TAX_PERCENTAGE DOUBLE NULL,
  EFFECTIVE_DATE DATE NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `SALES_TAX_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `SALES_TAX_SALES_TAX_ID_PK` PRIMARY KEY (`SALES_TAX_ID`)
);

DROP TABLE IF EXISTS `outlet` ;

CREATE TABLE IF NOT EXISTS outlet (
  OUTLET_ID INT NOT NULL AUTO_INCREMENT,
  OUTLET_NAME VARCHAR(100) NULL,
  ORDER_NUMBER VARCHAR(100) NULL,
  ORDER_NUMBER_PREFIX VARCHAR(100) NULL,
  CONTACT_NUMBER_PREFIX VARCHAR(100) NULL,
  CONTACT_RETURN_NUMBER VARCHAR(100) NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  SALES_TAX_ASSOCICATION_ID INT NOT NULL,
  ADDRESS_ASSOCICATION_ID INT NULL,
  TIME_ZONE_ASSOCICATION_ID INT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  IS_HEAD_OFFICE BIT,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  CONSTRAINT `OUTLET_ADDRESS_ASSOCICATION_ID_FK` FOREIGN KEY (`ADDRESS_ASSOCICATION_ID`) REFERENCES address (`ADDRESS_ID`),
  CONSTRAINT `OUTLET_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `OUTLET_SALES_TAX_ASSOCICATION_ID_FK` FOREIGN KEY (`SALES_TAX_ASSOCICATION_ID`) REFERENCES sales_tax (`SALES_TAX_ID`),
  CONSTRAINT `OUTLET_TIME_ZONE_ASSOCICATION_ID_FK` FOREIGN KEY (`TIME_ZONE_ASSOCICATION_ID`) REFERENCES time_zone (`TIME_ZONE_ID`),
  CONSTRAINT `OUTLET_OUTLET_ID_PK` PRIMARY KEY (`OUTLET_ID`)
);



DROP TABLE IF EXISTS `register`;
CREATE TABLE register(
  REGISTER_ID INT NOT NULL AUTO_INCREMENT,
  REGISTER_NAME VARCHAR(256) NOT NULL,
  CACHE_MANAGEMENT_ENABLE VARCHAR(256) NOT NULL,
  RECEIPT_NUMBER VARCHAR(256) NOT NULL,
  RECEIPT_PREFIX VARCHAR(256) NOT NULL,
  RECEIPT_SUFIX VARCHAR(256) NOT NULL,
  SELECT_NEXT_USER_FOR_SALE VARCHAR(256) NOT NULL,
  EMAIL_RECEIPT VARCHAR(256) NOT NULL,
  PRINT_RECEIPT VARCHAR(256) NOT NULL,
  NOTES VARCHAR(256) NOT NULL,
  PRINT_NOTES_ON_RECEIPT VARCHAR(256) NOT NULL,
  SHOW_DISCOUNT_ON_RECEIPT VARCHAR(256) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  OUTLET_ASSOCICATION_ID INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `REGISTER_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `REGISTER_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `REGISTER_REGISTER_ID_PK` PRIMARY KEY (`REGISTER_ID`)
);

DROP TABLE IF EXISTS `user` ;

CREATE TABLE user (
	USER_ID INT NOT NULL AUTO_INCREMENT,
	USER_EMAIL VARCHAR(256) NOT NULL,
	PASSWORD VARCHAR (50) NOT NULL,
	ROLE_ASSOCIATION_ID INT NOT NULL,
	FIRST_NAME VARCHAR(256) NOT NULL,
    LAST_NAME VARCHAR(256) NOT NULL,
	CONTACT_ASSOCICATION_ID INT NULL,
	OUTLET_ASSOCICATION_ID INT,
	IMAGE BLOB,
	LAST_LOGIN TIMESTAMP NOT NULL,
  	ACTIVE_INDICATOR BIT NOT NULL,
    CREATED_DATE TIMESTAMP NOT NULL,
    LAST_UPDATED TIMESTAMP NOT NULL,
    CREATED_BY INT NULL,
    UPDATED_BY INT NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
  	CONSTRAINT `USER_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
    CONSTRAINT `USER_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
    CONSTRAINT `USER_ROLE_ASSOCIATION_ID_FK` FOREIGN KEY (`ROLE_ASSOCIATION_ID`) REFERENCES role (`ROLE_ID`),
    CONSTRAINT `USER_CONTACT_ASSOCICATION_ID_FK` FOREIGN KEY (`CONTACT_ASSOCICATION_ID`) REFERENCES contact (`CONTACT_ID`),
    CONSTRAINT `USER_USER_ID_PK` PRIMARY KEY (`USER_ID`)
);

DROP TABLE IF EXISTS `user_outlets` ;

CREATE TABLE IF NOT EXISTS user_outlets (
  USER_OUTLETS_ID INT NOT NULL AUTO_INCREMENT,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  USER_ASSOCIATION_ID INT NOT NULL,
  OUTLET_ASSOCICATION_ID INT NULL,
  ADDRESS_ASSOCICATION_ID INT NULL,
  TIME_ZONE_ASSOCICATION_ID INT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  CONSTRAINT `USER_OUTLETS_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `USER_OUTLETS_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `USER_OUTLETS_USER_ASSOCIATION_ID_FK` FOREIGN KEY (`USER_ASSOCIATION_ID`) REFERENCES user (`USER_ID`),
  CONSTRAINT `USER_OUTLETS_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `USER_OUTLETS_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `USER_OUTLETS_USER_OUTLETS_ID_PK` PRIMARY KEY (`USER_OUTLETS_ID`)
);


DROP TABLE IF EXISTS `payment_type`;
CREATE TABLE payment_type(
  PAYMENT_TYPE_ID INT NOT NULL AUTO_INCREMENT,
  PAYMENT_TYPE_VALUE VARCHAR(100) NOT NULL,
  ROUND_TO VARCHAR(50) NULL,
  GATEWAY VARCHAR(100) NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  CONSTRAINT `PAYMENT_TYPE_REGISTER_ID_PK` PRIMARY KEY (`PAYMENT_TYPE_ID`)
);

DROP TABLE IF EXISTS `brand` ;

CREATE TABLE IF NOT EXISTS brand (
  BRAND_ID INT NOT NULL AUTO_INCREMENT,
  BRAND_NAME VARCHAR(200) NOT NULL,
  BRAND_DESCRIPTION VARCHAR(500) NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `BRAND_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `BRAND_BRAND_ID_PK` PRIMARY KEY (`BRAND_ID`)
);

DROP TABLE IF EXISTS `product_type` ;

CREATE TABLE IF NOT EXISTS product_type (
  PRODUCT_TYPE_ID INT NOT NULL AUTO_INCREMENT,
  PRODUCT_TYPE_NAME VARCHAR(200) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `PRODUCT_TYPE_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `PRODUCT_TYPE_PRODUCT_TYPE_ID_PK` PRIMARY KEY (`PRODUCT_TYPE_ID`)
);

CREATE TABLE IF NOT EXISTS product (
  PRODUCT_ID INT NOT NULL AUTO_INCREMENT,
  PRODUCT_NAME VARCHAR(500) NOT NULL,
  PRODUCT_UUID VARCHAR (500) NOT NULL,
  PRODUCT_DESC VARCHAR(1000) NULL,
  PRODUCT_HANDLER VARCHAR(45) NOT NULL COMMENT '\nA unique identifier for this product.\nThe handle is the unique identifier for this product.',
  PRODUCT_TYPE_ASSOCICATION_ID INT NOT NULL,
  CONTACT_ASSOCICATION_ID INT NOT NULL,
  BRAND_ASSOCICATION_ID INT NOT NULL,
  SALES_ACCOUNT_CODE VARCHAR(45) NULL,
  PURCHASE_ACCOUNT_CODE VARCHAR(45) NULL,
  PRODUCT_CAN_BE_SOLD VARCHAR(10) NOT NULL,
  STANDARD_PRODUCT VARCHAR(10) NOT NULL,
  TRACKING_PRODUCT VARCHAR(10) NOT NULL,
  VARIANT_PRODUCTS VARCHAR(10) NOT NULL,
  CURRENT_INVENTORY INT NULL,
  REORDER_POINT INT NULL,
  REORDER_AMOUNT DECIMAL(20,2) NULL,
  SUPPLY_PRICE_EXCL_TAX DECIMAL(20,2) NOT NULL,
  MARKUP_PRCT DECIMAL(8,5) NOT NULL COMMENT 'MARKUP %',
  SKU VARCHAR (500) NOT NULL COMMENT 'STOCK KEEPING UNIT ( SKU)',
  OUTLET_ASSOCICATION_ID INT NOT NULL,
  SALES_TAX_ASSOCICATION_ID INT NOT NULL COMMENT 'SALE TAX ID TO LINK WITH SALES TAX',
  IMAGE_PATH VARCHAR(250) NULL,
  DISPLAY BIT,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `PRODUCT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `PRODUCT_SALES_TAX_ASSOCICATION_ID_FK` FOREIGN KEY (`SALES_TAX_ASSOCICATION_ID`) REFERENCES sales_tax (`SALES_TAX_ID`),
  CONSTRAINT `PRODUCT_BRAND_ASSOCICATION_ID_FK` FOREIGN KEY (`BRAND_ASSOCICATION_ID`) REFERENCES brand (`BRAND_ID`),
  CONSTRAINT `PRODUCT_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRODUCT_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRODUCT_PRODUCT_TYPE_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_TYPE_ASSOCICATION_ID`) REFERENCES product_type (`PRODUCT_TYPE_ID`),
  CONSTRAINT `PRODUCT_CONTACT_ASSOCICATION_ID_FK` FOREIGN KEY (`CONTACT_ASSOCICATION_ID`) REFERENCES contact (`CONTACT_ID`),
  CONSTRAINT `PRODUCT_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `PRODUCT_PRODUCT_ID_PK` PRIMARY KEY (`PRODUCT_ID`)  
);

DROP TABLE IF EXISTS `tag` ;

CREATE TABLE IF NOT EXISTS tag (
  TAG_ID INT NOT NULL AUTO_INCREMENT,
  TAG_NAME VARCHAR(200) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `TAG_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `TAG_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `TAG_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `TAG_TAG_ID_PK` PRIMARY KEY (`TAG_ID`) 
);
  
DROP TABLE IF EXISTS `product_tag` ;

CREATE TABLE IF NOT EXISTS product_tag (
  PRODUCT_TAG_ID INT NOT NULL AUTO_INCREMENT,
  PRODUCT_TAG_UUID VARCHAR (500) NOT NULL,
  TAG_ASSOCICATION_ID INT NOT NULL,
  PRODUCT_ASSOCICATION_ID INT NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `PRODUCT_TAG_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `PRODUCT_TAG_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRODUCT_TAG_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRODUCT_TAG_PRODUCT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCICATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `PRODUCT_TAG_TAG_ASSOCICATION_ID_FK` FOREIGN KEY (`TAG_ASSOCICATION_ID`) REFERENCES tag (`TAG_ID`),
  CONSTRAINT `PRODUCT_TAG_PRODUCT_TAG_ID_PK` PRIMARY KEY (`PRODUCT_TAG_ID`)
);

DROP TABLE IF EXISTS `variant_attribute` ;

CREATE TABLE IF NOT EXISTS variant_attribute (
  VARIANT_ATTRIBUTE_ID INT NOT NULL AUTO_INCREMENT,
  ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
  VARIANT_ATTRIBUTEcol VARCHAR(45) NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  VARIANT_ATTRIBUTE_ASSOCIATION_ID INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `VARIANT_ATTRIBUTE_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_ATTRIBUTE_NAME_UK` UNIQUE KEY (`ATTRIBUTE_NAME`),
  CONSTRAINT `VARIANT_ATTRIBUTE_VARIANT_ATTRIBUTE_ID_PK` PRIMARY KEY (`VARIANT_ATTRIBUTE_ID`)
);

DROP TABLE IF EXISTS `product_variant` ;

CREATE TABLE IF NOT EXISTS product_variant (

  PRODUCT_VARIANT_ID INT NOT NULL AUTO_INCREMENT,
  PRODUCT_ASSOCICATION_ID INT NOT NULL,
  VARIANT_ATTRIBUTE_NAME VARCHAR(200) NULL,
  PRODUCT_VARIANT_UUID VARCHAR (500) NOT NULL,
  PRODUCT_UUID VARCHAR (500) NOT NULL,
  VARIANT_ATTRIBUTE_VALUE_1 VARCHAR(200) NULL,
  VARIANT_ATTRIBUTE_VALUE_2 VARCHAR(200) NULL,
  VARIANT_ATTRIBUTE_VALUE_3 VARCHAR(200) NULL,
  VARIANT_ATTRIBUTE_ASSOCICATION_ID_1 INT NULL,
  VARIANT_ATTRIBUTE_ASSOCICATION_ID_2 INT NULL,
  VARIANT_ATTRIBUTE_ASSOCICATION_ID_3 INT NULL,
  CURRENT_INVENTORY INT NULL,
  REORDER_POINT INT NULL,
  REORDER_AMOUNT DECIMAL(20,2) NULL,
  SUPPLY_PRICE_EXCL_TAX DECIMAL(20,2) NOT NULL,
  MARKUP_PRCT DECIMAL(8,5) NOT NULL COMMENT 'MARKUP %',
  SKU VARCHAR (500) NOT NULL COMMENT 'STOCK KEEPING UNIT ( SKU)',
  OUTLET_ASSOCICATION_ID INT NOT NULL,
  SALES_TAX_ASSOCICATION_ID INT NOT NULL COMMENT 'SALE TAX ID TO LINK WITH SALES TAX',
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  PRODUCT_VARIANT_ASSOCIATION_ID INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `PRODUCT_VARIANT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `PRODUCT_VARIANT_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRODUCT_VARIANT_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRODUCT_VARIANT_SALES_TAX_ASSOCICATION_ID_FK` FOREIGN KEY (`SALES_TAX_ASSOCICATION_ID`) REFERENCES sales_tax (`SALES_TAX_ID`),
  CONSTRAINT `PRODUCT_VARIANT_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `PRODUCT_VARIANT_PRODUCT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCICATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `PRODUCT_VARIANT_VARIANT_ATTRIBUTE_ASSOCICATION_ID_1_FK` FOREIGN KEY (`VARIANT_ATTRIBUTE_ASSOCICATION_ID_1`) REFERENCES variant_attribute (`VARIANT_ATTRIBUTE_ID`),
  CONSTRAINT `PRODUCT_VARIANT_VARIANT_ATTRIBUTE_ASSOCICATION_ID_2_FK` FOREIGN KEY (`VARIANT_ATTRIBUTE_ASSOCICATION_ID_2`) REFERENCES variant_attribute (`VARIANT_ATTRIBUTE_ID`),
  CONSTRAINT `PRODUCT_VARIANT_VARIANT_ATTRIBUTE_ASSOCICATION_ID_3_FK` FOREIGN KEY (`VARIANT_ATTRIBUTE_ASSOCICATION_ID_3`) REFERENCES variant_attribute (`VARIANT_ATTRIBUTE_ID`),
  CONSTRAINT `PRODUCT_VARIANT_PRODUCT_VARIANT_ID_PK` PRIMARY KEY (`PRODUCT_VARIANT_ID`)
);

DROP TABLE IF EXISTS `composite_product` ;

CREATE TABLE IF NOT EXISTS composite_product (

  COMPOSITE_PRODUCT_ID INT NOT NULL AUTO_INCREMENT,
  COMPOSITE_PRODUCT_UUID VARCHAR (500) NOT NULL,
  PRODUCT_UUID VARCHAR (500) NOT NULL,
  COMPOSITE_QUANTITY INT NOT NULL,
  PRODUCT_ASSOCICATION_ID INT NOT NULL,
  SELECTIVE_PRODUCT_ASSOCIATION_ID INT NOT NULL,
  PRODUCT_VARIANT_ASSOCICATION_ID INT NULL,
  OUTLET_ASSOCICATION_ID INT NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `COMPOSITE_PRODUCT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `COMPOSITE_PRODUCT_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `COMPOSITE_PRODUCT_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `COMPOSITE_PRODUCT_PRODUCT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCICATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `COMPOSITE_PRODUCT_SELECTIVE_PRODUCT_ASSOCIATION_ID_FK` FOREIGN KEY (`SELECTIVE_PRODUCT_ASSOCIATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `COMPOSITE_PRODUCT_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `COMPOSITE_PRODUCT_PRODUCT_VARIANT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_VARIANT_ASSOCICATION_ID`) REFERENCES product_variant (`PRODUCT_VARIANT_ID`),
  CONSTRAINT `COMPOSITE_PRODUCT_COMPOSITE_PRODUCT_ID_PK` PRIMARY KEY (`COMPOSITE_PRODUCT_ID`)
);


DROP TABLE IF EXISTS `variant_attribute_values` ;

CREATE TABLE IF NOT EXISTS variant_attribute_values (
  VARIANT_ATTRIBUTE_VALUES_ID INT NOT NULL AUTO_INCREMENT,
  VARIANT_ATTRIBUTE_ASSOCICATION_ID INT NOT NULL,
  ATTRIBUTE_VALUE VARCHAR(200) NOT NULL,
  PRODUCT_VARIANT_ASSOCICATION_ID INT NOT NULL,
  PRODUCT_ASSOCIATION_ID INT NOT NULL,
  PRODUCT_UUID VARCHAR (500) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `VARIANT_ATTRIBUTE_VALUES_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_VALUES_PRODUCT_VARIANT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_VARIANT_ASSOCICATION_ID`) REFERENCES product_variant (`PRODUCT_VARIANT_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_VALUES_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_VALUES_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_VALUES_PRODUCT_ASSOCIATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCIATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_VALUES_VARIANT_ATTRIBUTE_ASSOCICATION_ID_FK` FOREIGN KEY (`VARIANT_ATTRIBUTE_ASSOCICATION_ID`) REFERENCES variant_attribute (`VARIANT_ATTRIBUTE_ID`),
  CONSTRAINT `VARIANT_ATTRIBUTE_VALUES_VARIANT_ATTRIBUTE_VALUES_ID_PK` PRIMARY KEY (`VARIANT_ATTRIBUTE_VALUES_ID`)
);

DROP TABLE IF EXISTS `product_history` ;

CREATE TABLE IF NOT EXISTS product_history (
  PRODUCT_HISTORY_ID INT NOT NULL AUTO_INCREMENT,
  PRODUCT_HISTORY_UUID VARCHAR (500) NOT NULL,
  ACTION_DATE TIMESTAMP NOT NULL,
  PRODUCT_ASSOCICATION_ID INT NOT NULL,
  PRODUCT_VARIANT_ASSOCICATION_ID INT ,
  COMPOSITE_PRODUCT_ASSOCIATION_ID INT ,
  OUTLET_ASSOCICATION_ID INT NOT NULL,
  QUANTITY INT NOT NULL,
  CHANGE_QUANTITY INT NOT NULL,
  OUTLET_QUANTITY INT NOT NULL,
  ACTION VARCHAR(50) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_BY INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `PRODUCT_HISTORY_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `PRODUCT_HISTORY_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRODUCT_HISTORY_PRODUCT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCICATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `PRODUCT_HISTORY_COMPOSITE_PRODUCT_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPOSITE_PRODUCT_ASSOCIATION_ID`) REFERENCES composite_product (`COMPOSITE_PRODUCT_ID`),
  CONSTRAINT `PRODUCT_HISTORY_PRODUCT_VARIANT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_VARIANT_ASSOCICATION_ID`) REFERENCES product_variant (`PRODUCT_VARIANT_ID`),
  CONSTRAINT `PRODUCT_HISTORY_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `PRODUCT_HISTORY_PRODUCT_HISTORY_ID_PK` PRIMARY KEY (`PRODUCT_HISTORY_ID`)
);

DROP TABLE IF EXISTS `status` ;

CREATE TABLE IF NOT EXISTS status (
  STATUS_ID INT NOT NULL AUTO_INCREMENT,
  STATUS_CODE VARCHAR(5) NOT NULL,
  STATUS_DESC VARCHAR(45) NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  CONSTRAINT `STATUS_STATUS_CODE_UK` UNIQUE KEY (`STATUS_CODE`),
  CONSTRAINT `STATUS_STATUS_ID_PK` PRIMARY KEY (`STATUS_ID`)
);

DROP TABLE IF EXISTS `stock_order_type` ;

CREATE TABLE IF NOT EXISTS stock_order_type (
  STOCK_ORDER_TYPE_ID INT NOT NULL AUTO_INCREMENT,
  STOCK_ORDER_TYPE_CODE VARCHAR(5) NOT NULL,
  STOCK_ORDER_TYPE_DESC VARCHAR(45) NOT NULL COMMENT 'USED TO SAVE ORDER TYPE CODE E.G.\n\nCONTACT ORDER\nCONTACT RETURN\nOUTLET TRANSFER',
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL, 
  CONSTRAINT `STOCK_ORDER_TYPE_STOCK_ORDER_TYPE_CODE_UK` UNIQUE KEY (`STOCK_ORDER_TYPE_CODE`),
  CONSTRAINT `STOCK_ORDER_TYPE_STOCK_ORDER_TYPE_ID_PK` PRIMARY KEY (`STOCK_ORDER_TYPE_ID`)
);

DROP TABLE IF EXISTS `stock_order` ;

CREATE TABLE IF NOT EXISTS stock_order (
  STOCK_ORDER_ID INT NOT NULL AUTO_INCREMENT,
  STOCK_REF_NO VARCHAR(45) NULL COMMENT 'STOCK REFERENCE NUMBER',
  STATUS_ASSOCICATION_ID INT NOT NULL,
  DILIVERY_DUE_DATE DATE NOT NULL,
  CONTACT_ID INT NOT NULL,
  ORDER_NO VARCHAR(45) NULL,
  OUTLET_ASSOCICATION_ID INT NOT NULL,
  SOURCE_OUTLET_ASSOCICATION_ID INT NULL COMMENT 'FOR STOCK TRANSFER INPLACE OF CONTACT',
  CONTACT_INVOICE_NO VARCHAR(45) NULL,
  STOCK_ORDER_DATE DATETIME NULL,
  REMARKS VARCHAR(500) NULL,
  ORDR_RECV_DATE DATETIME NULL COMMENT 'ORDER RECIEVING DATE',
  RETURN_NO VARCHAR(45) NULL COMMENT 'USED FOR STOCK RETURN TRANSACTION',
  STOCK_ORDER_TYPE_ASSOCICATION_ID INT NOT NULL COMMENT 'USED TO SAVE ORDER TYPE CODE E.G.\n\nCONTACT ORDER\nCONTACT RETURN\nOUTLET TRANSFER',
  AUTOFILL_REORDER BIT NOT NULL COMMENT 'USED TO STORE INFO ABOUT AUTOFILL FOR REORDER',
  RETAIL_PRICE_BILL BIT NOT NULL DEFAULT FALSE , 
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `STOCK_ORDER_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `STOCK_ORDER_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `STOCK_ORDER_STATUS_ASSOCICATION_ID_FK` FOREIGN KEY (`STATUS_ASSOCICATION_ID`) REFERENCES status (`STATUS_ID`),
  CONSTRAINT `STOCK_ORDER_SOURCE_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`SOURCE_OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `STOCK_ORDER_STOCK_ORDER_TYPE_ASSOCICATION_ID_FK` FOREIGN KEY (`STOCK_ORDER_TYPE_ASSOCICATION_ID`) REFERENCES stock_order_type (`STOCK_ORDER_TYPE_ID`),
  CONSTRAINT `STOCK_ORDER_STOCK_ORDER_ID_PK` PRIMARY KEY (`STOCK_ORDER_ID`)
);


DROP TABLE IF EXISTS `stock_order_detail` ;

CREATE TABLE IF NOT EXISTS stock_order_detail (
  STOCK_ORDER_DETAIL_ID INT NOT NULL AUTO_INCREMENT,
  STOCK_ORDER_ASSOCICATION_ID INT NOT NULL,
  PRODUCT_VARIANT_ASSOCICATION_ID INT NULL,
  PRODUCT_ASSOCIATION_ID INT NULL,
  IS_PRODUCT BIT NOT NULL,
  ORDER_PROD_QTY INT NULL COMMENT 'ORDERED product QUANTITY',
  ORDR_SUPPLY_PRICE DECIMAL(20,2) NULL COMMENT 'ORDERED SUPPLY PRICE',
  RECV_PROD_QTY INT NULL COMMENT 'RECIVED product QUANTITY',
  RECV_SUPPLY_PRICE DECIMAL(20,2) NULL COMMENT 'RECIEVED SUPPLY PRICE',
  RETAIL_PRICE DECIMAL(20,2) NULL COMMENT 'RETAIL PRICE',
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `STOCK_ORDER_DETAIL_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `STOCK_ORDER_DETAIL_STOCK_ORDER_ASSOCICATION_ID_FK` FOREIGN KEY (`STOCK_ORDER_ASSOCICATION_ID`) REFERENCES stock_order (`STOCK_ORDER_ID`),
  CONSTRAINT `STOCK_ORDER_DETAIL_PRODUCT_VARIANT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_VARIANT_ASSOCICATION_ID`) REFERENCES product_variant (`PRODUCT_VARIANT_ID`),
  CONSTRAINT `STOCK_ORDER_DETAIL_PRODUCT_ASSOCIATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCIATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `STOCK_ORDER_DETAIL_STOCK_ORDER_DETAIL_ID_PK` PRIMARY KEY (`STOCK_ORDER_DETAIL_ID`)
);

DROP TABLE IF EXISTS `price_book` ;

CREATE TABLE IF NOT EXISTS price_book (
  PRICE_BOOK_ID INT NOT NULL AUTO_INCREMENT,
  PRICE_BOOK_NAME NVARCHAR(250) NOT NULL COMMENT 'STOCK REFERENCE NUMBER',
  CONTACT_GROUP_ASSOCICATION_ID INT,
  OUTLET_ASSOCICATION_ID INT,
  VALID_FROM DATE NOT NULL,
  VALID_TO DATE NOT NULL,
  IS_VALID_ON_STORE BIT NULL,
  IS_VALID_ON_ECOM BIT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `PRICE_BOOK_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `PRICE_BOOK_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRICE_BOOK_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRICE_BOOK_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `PRICE_BOOK_CONTACT_GROUP_ASSOCICATION_ID_FK` FOREIGN KEY (`CONTACT_GROUP_ASSOCICATION_ID`) REFERENCES contact_group (`CONTACT_GROUP_ID`),
  CONSTRAINT `PRICE_BOOK_PRICE_BOOK_ID_PK` PRIMARY KEY (`PRICE_BOOK_ID`)
);

DROP TABLE IF EXISTS `price_book_detail` ;

CREATE TABLE IF NOT EXISTS price_book_detail (
  PRICE_BOOK_DETAIL_ID INT NOT NULL AUTO_INCREMENT,
  PRICE_BOOK_ASSOCICATION_ID INT NOT NULL,
  PRODUCT_ASSOCICATION_ID INT NOT NULL,
  PRODUCT_VARIENT_ASSOCICATION_ID INT,
  SUPPLY_PRICE DECIMAL(21,5) NULL,
  MARKUP DECIMAL(5,2) NULL,
  DISCOUNT DECIMAL(5,2) NULL,
  MIN_UNITS INT NULL,
  MAX_UNITS INT NULL,
  SALES_TAX_ASSOCIATION_ID  INT NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NOT NULL,
  UPDATED_BY INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `PRICE_BOOK_DETAIL_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `PRICE_BOOK_DETAIL_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT `PRICE_BOOK_DETAIL_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
  CONSTRAINT PRICE_BOOK_DETAIL_PRODUCT_VARIENT_ASSOCIATION_ID_FK FOREIGN KEY (PRODUCT_VARIENT_ASSOCICATION_ID) REFERENCES product_variant (PRODUCT_VARIANT_ID),
  CONSTRAINT `PRICE_BOOK_DETAIL_PRODUCT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCICATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `PRICE_BOOK_DETAIL_PRICE_BOOK_ASSOCICATION_ID_FK` FOREIGN KEY (`PRICE_BOOK_ASSOCICATION_ID`) REFERENCES price_book (`PRICE_BOOK_ID`),
  CONSTRAINT `PRICE_BOOK_DETAIL_PRICE_BOOK_DETAIL_ID_PK` PRIMARY KEY (`PRICE_BOOK_DETAIL_ID`),
  CONSTRAINT `PRICE_BOOK_DETAIL_SALES_TAX_ASSOCIATION_ID_FK` FOREIGN KEY (`SALES_TAX_ASSOCIATION_ID`) REFERENCES sales_tax (`SALES_TAX_ID`)

);

DROP TABLE IF EXISTS `inventory_count` ;

CREATE TABLE IF NOT EXISTS inventory_count (
  INVENTORY_COUNT_ID INT NOT NULL AUTO_INCREMENT,
  INVENTORY_COUNT_NAME VARCHAR(200) NULL,
  OUTLET_ASSOCICATION_ID INT NULL,
  START_DATE DATE NULL,
  START_TIME TIME NULL,
  INVENTORY_COUNT_TYPE VARCHAR(45) NULL COMMENT 'INVENTORY COUNT FULL OR PARTIAL\n\n\'F\' MEANS FULL\n\'p\' MEANS PARTIAL',
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `INVENTORY_COUNT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `INVENTORY_COUNT_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `INVENTORY_COUNT_INVENTORY_COUNT_ID_PK` PRIMARY KEY (`INVENTORY_COUNT_ID`)
);


DROP TABLE IF EXISTS `inventory_count_detail` ;

CREATE TABLE IF NOT EXISTS inventory_count_detail (
  INVENTORY_COUNT_DETAIL_ID INT NOT NULL AUTO_INCREMENT,
  INVENTORY_COUNT_ASSOCICATION_ID INT NULL COMMENT 'INVENTORY COUNT FULL OR PARTIAL\n\n\'F\' MEANS FULL\n\'p\' MEANS PARTIAL',
  PRODUCT_ASSOCICATION_ID INT NULL,
  INVENTORY_COUNT_EXPC INT NULL COMMENT 'INVENTORY_COUNT_EXPECTED',
  INVENTORY_COUNT_COUNTED INT NULL,
  STATUS_ASSOCICATION_ID INT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,  
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `INVENTORY_COUNT_DETAIL_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `INVENTORY_COUNT_DETAIL_INVENTORY_COUNT_ASSOCICATION_ID_FK` FOREIGN KEY (`INVENTORY_COUNT_ASSOCICATION_ID`) REFERENCES inventory_count (`INVENTORY_COUNT_ID`),
  CONSTRAINT `INVENTORY_COUNT_DETAIL_PRODUCT_ASSOCICATION_ID_FK` FOREIGN KEY (`PRODUCT_ASSOCICATION_ID`) REFERENCES product (`PRODUCT_ID`),
  CONSTRAINT `INVENTORY_COUNT_DETAIL_STATUS_ASSOCICATION_ID_FK` FOREIGN KEY (`STATUS_ASSOCICATION_ID`) REFERENCES status (`STATUS_ID`),
  CONSTRAINT `INVENTORY_COUNT_DETAIL_INVENTORY_COUNT_DETAIL_ID_PK` PRIMARY KEY (`INVENTORY_COUNT_DETAIL_ID`)
); 

DROP TABLE IF EXISTS `daily_register` ;

CREATE TABLE IF NOT EXISTS daily_register (
  DAILY_REGISTER_ID INT NOT NULL AUTO_INCREMENT,
  CREDIT_CARD_AMT_ACTUAL DECIMAL(20,2) NULL,
  CREDIT_CARD_AMT_EXPECTED DECIMAL(20,2) NULL,
  CREDIT_CARD_AMT_DIFFERENCE DECIMAL(20,2) NULL,
  CASH_AMT_ACTUAL DECIMAL(20,2) NULL,
  CASH_AMT_EXPECTED DECIMAL(20,2) NULL,
  CASH_AMT_DIFFERENCE DECIMAL(20,2) NULL,
  STORE_CREDIT_AMT_ACTUAL DECIMAL(20,2) NULL,
  STORE_CREDIT_AMT_EXPECTED DECIMAL(20,2) NULL,
  STORE_CREDIT_AMT_DIFFERENCE DECIMAL(20,2) NULL,
  ACTUAL_AMT DECIMAL(20,2) NULL,
  REGISTER_OPENING_NOTES  VARCHAR (256),
  REGISTER_CLOSING_NOTES  VARCHAR (256),
  REGISTER_ASSOCICATION_ID INT NOT NULL ,
  STATUS_ASSOCICATION_ID INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  OUTLET_ASSOCICATION_ID INT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  CLOSED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  CONSTRAINT `DAILY_REGISTER_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `DAILY_REGISTER_STATUS_ASSOCICATION_ID_FK` FOREIGN KEY (`STATUS_ASSOCICATION_ID`) REFERENCES status (`STATUS_ID`),
  CONSTRAINT `DAILY_REGISTER_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `DAILY_REGISTER_REGISTER_ASSOCICATION_ID_FK` FOREIGN KEY (`REGISTER_ASSOCICATION_ID`) REFERENCES register (`REGISTER_ID`),
  CONSTRAINT `DAILY_REGISTER_MAIN_INVOICE_MAIN_ID_PK` PRIMARY KEY (`DAILY_REGISTER_ID`)
);



DROP TABLE IF EXISTS `delivery_method`;
CREATE TABLE delivery_method(
  DELIVERY_METHOD_ID INT NOT NULL AUTO_INCREMENT,
  DELIVERY_METHOD_NAME VARCHAR(100) NOT NULL,
  SHIPPING_RATE DECIMAL(5,2) NOT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  PRIMARY KEY (DELIVERY_METHOD_ID)
);
	

DROP TABLE IF EXISTS order_main;

CREATE TABLE order_main
	(
	ORDER_MAIN_ID                INT NOT NULL auto_increment,
	ORDER_REF_NBR                VARCHAR (200),
	ORDER_TRACKING_NBR                VARCHAR (200),
	ORDER_NOTES                  VARCHAR (500),
	ORDER_GENERATION_DTE         DATETIME,
	ORDER_CANCEL_DTE             DATETIME,
	ORDER_EXPECTED_DELIVERY_DTE             DATETIME,
    ORDER_DELIVERY_DTE             DATETIME,
	ORDER_BILL_AMT                    DECIMAL (21,5),
    TAX_AMT                    DECIMAL (21,5),
	STATUS_ASSOCICATION_ID         INT NOT NULL,
	CONTACT_ASSOCIATION_ID        INT,
	COMPANY_ASSOCIATION_ID        INT NOT NULL,
	OUTLET_ASSOCICATION_ID         INT,
	ACTIVE_INDICATOR               BIT (1) NOT NULL,
	CREATED_DATE                   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LAST_UPDATED                   TIMESTAMP NOT NULL ,
	CREATED_BY                     INT,
	UPDATED_BY                     INT,
	PAYMENT_TYPE_ASSOCICATION_ID   INT NOT NULL,
	DELIVER_METHOD_ASSOCICATION_ID   INT NOT NULL,
	PRIMARY KEY (ORDER_MAIN_ID),
	CONSTRAINT ORDER_MAIN_COMPANY_ASSOCIATION_ID_FK FOREIGN KEY (COMPANY_ASSOCIATION_ID) REFERENCES company (COMPANY_ID),
	CONSTRAINT ORDER_MAIN_CONTACT_ASSOCIATION_ID_FK FOREIGN KEY (CONTACT_ASSOCIATION_ID) REFERENCES contact (CONTACT_ID),
	CONSTRAINT ORDER_MAIN_OUTLET_ASSOCICATION_ID_FK FOREIGN KEY (OUTLET_ASSOCICATION_ID) REFERENCES outlet (OUTLET_ID),
	CONSTRAINT ORDER_MAIN_PAYMENT_TYPE_ASSOCICATION_ID_FK FOREIGN KEY (PAYMENT_TYPE_ASSOCICATION_ID) REFERENCES payment_type (PAYMENT_TYPE_ID),
	CONSTRAINT ORDER_MAIN_DELIVERY_METHOD_ID_FK FOREIGN KEY (DELIVER_METHOD_ASSOCICATION_ID) REFERENCES delivery_method (DELIVERY_METHOD_ID),
	CONSTRAINT ORDER_MAIN_STATUS_ASSOCICATION_ID_FK FOREIGN KEY (STATUS_ASSOCICATION_ID) REFERENCES status (STATUS_ID)
	);

	
	

DROP TABLE IF EXISTS order_detail;
CREATE TABLE order_detail
	(
	ORDER_DETAIL_ID              INT NOT NULL auto_increment,
		ORDER_MAIN_ASSOCICATION_ID   INT,
	PRODUCT_VARIENT_ASSOCIATION_ID INT,
	PRODUCT_ASSOCIATION_ID INT,
	ITEM_UNIT_PRICE             DECIMAL (21,5),
	ITEM_TAX_AMOUNT                DECIMAL (21,5),
	ITEM_NOTES                     VARCHAR (256),
	PRODUCT_QUANTITY               INT NOT NULL,
	CREATED_DATE                   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LAST_UPDATED                   TIMESTAMP NOT NULL ,
	CREATED_BY                     INT,
	UPDATED_BY                     INT,
    OUTLET_ASSOCICATION_ID         INT,
	PRIMARY KEY (ORDER_DETAIL_ID),
	CONSTRAINT ORDER_DETAIL_ORDER_MAIN_ASSOCICATION_ID_FK FOREIGN KEY (ORDER_MAIN_ASSOCICATION_ID) REFERENCES order_main (ORDER_MAIN_ID),
	CONSTRAINT ORDER_DETAIL_OUTLET_ASSOCICATION_ID_FK FOREIGN KEY (OUTLET_ASSOCICATION_ID) REFERENCES outlet (OUTLET_ID),
	CONSTRAINT ORDER_DETAIL_PRODUCT_VARIENT_ASSOCIATION_ID_FK FOREIGN KEY (PRODUCT_VARIENT_ASSOCIATION_ID) REFERENCES product_variant (PRODUCT_VARIANT_ID),
	CONSTRAINT ORDER_DETAIL_PRODUCT_ASSOCIATION_ID_FK FOREIGN KEY (PRODUCT_ASSOCIATION_ID) REFERENCES product (PRODUCT_ID)
	);

DROP TABLE IF EXISTS invoice_main;

CREATE TABLE invoice_main
	(
	INVOICE_MAIN_ID                INT NOT NULL auto_increment,
	INVOICE_REF_NBR                VARCHAR (100),
	INVOICE_NOTES                  VARCHAR (256),
	INVOICE_DISCOUNT               DECIMAL (20,2),
	INVOICE_TAX                    DECIMAL (20,2),
	INVC_TYPE_CDE                  VARCHAR (5),
	INVOICE_GENERATION_DTE         DATETIME,
	INVOICE_CANCEL_DTE             DATETIME,
	INVOICE_AMT                    DECIMAL (20,2),
	INVOICE_DISCOUNT_AMT           DECIMAL (20,2),
	INVOICE_NET_AMT             DECIMAL (20,2),
	INVOICE_GIVEN_AMT              DECIMAL (20,2),
	INVOICE_ORIGNAL_AMT              DECIMAL (20,2),
	SETTLED_AMT                    DECIMAL (20,2),
	STATUS_ASSOCICATION_ID         INT NOT NULL,
	ORDER_ASSOCICATION_ID         INT,
	CONTACT_ASSOCIATION_ID        INT,
	COMPANY_ASSOCIATION_ID        INT NOT NULL,
	OUTLET_ASSOCICATION_ID         INT,
	ACTIVE_INDICATOR               BIT (1) NOT NULL,
	CREATED_DATE                   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LAST_UPDATED                   TIMESTAMP NOT NULL ,
	CREATED_BY                     INT,
	UPDATED_BY                     INT,
	DAILY_REGISTER_ASSOCICATION_ID INT NOT NULL,
	PAYMENT_TYPE_ASSOCICATION_ID   INT NOT NULL,
	PRIMARY KEY (INVOICE_MAIN_ID),
	CONSTRAINT INVOICE_MAIN_COMPANY_ASSOCIATION_ID_FK FOREIGN KEY (COMPANY_ASSOCIATION_ID) REFERENCES company (COMPANY_ID),
	CONSTRAINT INVOICE_MAIN_CONTACT_ASSOCIATION_ID_FK FOREIGN KEY (CONTACT_ASSOCIATION_ID) REFERENCES contact (CONTACT_ID),
	CONSTRAINT INVOICE_MAIN_DAILY_REGISTER_ASSOCICATION_ID_FK FOREIGN KEY (DAILY_REGISTER_ASSOCICATION_ID) REFERENCES daily_register (DAILY_REGISTER_ID),
	CONSTRAINT INVOICE_MAIN_OUTLET_ASSOCICATION_ID_FK FOREIGN KEY (OUTLET_ASSOCICATION_ID) REFERENCES outlet (OUTLET_ID),
	CONSTRAINT INVOICE_MAIN_PAYMENT_TYPE_ASSOCICATION_ID_FK FOREIGN KEY (PAYMENT_TYPE_ASSOCICATION_ID) REFERENCES payment_type (PAYMENT_TYPE_ID),
	CONSTRAINT INVOICE_MAIN_STATUS_ASSOCICATION_ID_FK FOREIGN KEY (STATUS_ASSOCICATION_ID) REFERENCES status (STATUS_ID),
	CONSTRAINT INVOICE_MAIN_ORDER_ASSOCICATION_ID_FK FOREIGN KEY (ORDER_ASSOCICATION_ID) REFERENCES order_main (ORDER_MAIN_ID)
	);



DROP TABLE IF EXISTS `cash_managment` ;

CREATE TABLE IF NOT EXISTS cash_managment (
  CASH_MANAGMENT_ID INT NOT NULL AUTO_INCREMENT,
  CASH_AMT DECIMAL(20,2) NULL,
  CASH_MANAGMENT_NOTES VARCHAR(256) NULL,
  CASH_MANAGMENT_TYPE VARCHAR(10) NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  OUTLET_ASSOCICATION_ID INT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  DAILY_REGISTER_ASSOCICATION_ID INT NOT NULL,
  CONSTRAINT `CASH_MANAGMENT_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `CASH_MANAGMENT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `CASH_MANAGMENT_DAILY_REGISTER_ASSOCICATION_ID_FK` FOREIGN KEY (`DAILY_REGISTER_ASSOCICATION_ID`) REFERENCES daily_register (`DAILY_REGISTER_ID`),
  CONSTRAINT `CASH_MANAGMENT_MAIN_INVOICE_MAIN_ID_PK` PRIMARY KEY (`CASH_MANAGMENT_ID`)
);


DROP TABLE IF EXISTS `loyalty`;
CREATE TABLE loyalty(
  LOYALTY_ID INT NOT NULL AUTO_INCREMENT,
  LOYALTY_AMOUNT DECIMAL(10,2) NOT NULL,
  CONTACT_ASSOCIATION_ID INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  OUTLET_ASSOCICATION_ID INT NULL,
  ACTIVE_INDICATOR BIT NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,  
  CONSTRAINT `LOYALTY_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `LOYALTY_CONTACT_ASSOCIATION_ID_FK` FOREIGN KEY (`CONTACT_ASSOCIATION_ID`) REFERENCES contact (`CONTACT_ID`),
  CONSTRAINT `LOYALTY_OUTLET_ASSOCICATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCICATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `LOYALTY_LOYALTY_ID_PK` PRIMARY KEY (`LOYALTY_ID`)
);



DROP TABLE IF EXISTS invoice_detail;
CREATE TABLE invoice_detail
	(
	INVOICE_DETAIL_ID              INT NOT NULL auto_increment,
	PRODUCT_VARIENT_ASSOCIATION_ID INT,
	PRODUCT_ASSOCIATION_ID INT,
	ITEM_RETAIL_PRICE             DECIMAL (20,2),
	ITEM_SALE_PRICE             DECIMAL (20,2),
	ITEM_DISCOUNT_PRCT            DECIMAL (20,2),
	ITEM_TAX_AMOUNT                DECIMAL (20,2),
	ITEM_ORIGNAL_AMT              DECIMAL (20,2),
	ITEM_NOTES                     VARCHAR (256),
	INVOICE_MAIN_ASSOCICATION_ID   INT,
	PRODUCT_QUANTITY               INT NOT NULL,
	CREATED_DATE                   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LAST_UPDATED                   TIMESTAMP NOT NULL ,
	CREATED_BY                     INT,
	UPDATED_BY                     INT,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	OUTLET_ASSOCICATION_ID         INT,
	CONSTRAINT INVOICE_DETAIL_OUTLET_ASSOCICATION_ID_FK FOREIGN KEY (OUTLET_ASSOCICATION_ID) REFERENCES outlet (OUTLET_ID),	
  	CONSTRAINT `INVOICE_DETAIL_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	PRIMARY KEY (INVOICE_DETAIL_ID),
	KEY INVOICE_DETAIL_PRODUCT_VARIENT_ASSOCIATION_ID_FK (PRODUCT_VARIENT_ASSOCIATION_ID),
	KEY INVOICE_DETAIL_INVOICE_MAIN_ASSOCICATION_ID_FK (INVOICE_MAIN_ASSOCICATION_ID),
	CONSTRAINT INVOICE_DETAIL_INVOICE_MAIN_ASSOCICATION_ID_FK FOREIGN KEY (INVOICE_MAIN_ASSOCICATION_ID) REFERENCES invoice_main (INVOICE_MAIN_ID),
	CONSTRAINT INVOICE_DETAIL_PRODUCT_VARIENT_ASSOCIATION_ID_FK FOREIGN KEY (PRODUCT_VARIENT_ASSOCIATION_ID) REFERENCES product_variant (PRODUCT_VARIANT_ID),
	CONSTRAINT INVOICE_DETAIL_PRODUCT_ASSOCIATION_ID_FK FOREIGN KEY (PRODUCT_ASSOCIATION_ID) REFERENCES product (PRODUCT_ID)
	);

DROP TABLE IF EXISTS `receipt` ;

CREATE TABLE IF NOT EXISTS receipt (
  RECEIPT_ID INT NOT NULL AUTO_INCREMENT,
  RECEIPT_REF_NO VARCHAR (45),
  RECEIPT_DATE DATETIME,
  RECEIPT_AMOUNT DECIMAL (20,2),
  PAYMENT_TYPE_ASSOCICATION_ID INT NOT NULL,
  STATUS_ASSOCICATION_ID INT NOT NULL,
  RECEIPT_CANCELLATION_DATE VARCHAR (45),
  RECEIPT_UAF_AMT DECIMAL (20,2),
  OUTLET_ASSOCIATION_ID INT,
  CONTACT_ASSOCIATION_ID INT,
  INVOICE_MAIN_ASSOCICATION_ID INT,
  ACTIVE_INDICATOR BIT (1) NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  LAST_UPDATED TIMESTAMP NOT NULL ,
  CREATED_BY INT,
  UPDATED_BY INT,
  DAILY_REGISTER_ASSOCICATION_ID  INT NOT NULL,
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `RECEIPT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `RECEIPT_DAILY_REGISTER_ASSOCICATION_ID_FK` FOREIGN KEY (`DAILY_REGISTER_ASSOCICATION_ID`) REFERENCES daily_register (`DAILY_REGISTER_ID`),
  CONSTRAINT `RECEIPT_OUTLET_ASSOCIATION_ID_FK` FOREIGN KEY (`OUTLET_ASSOCIATION_ID`) REFERENCES outlet (`OUTLET_ID`),
  CONSTRAINT `RECEIPT_CONTACT_ASSOCICATION_ID_FK` FOREIGN KEY (`CONTACT_ASSOCIATION_ID`) REFERENCES contact (`CONTACT_ID`),
  CONSTRAINT `RECEIPT_INVOICE_MAIN_ASSOCICATION_ID_FK` FOREIGN KEY (`INVOICE_MAIN_ASSOCICATION_ID`) REFERENCES invoice_main (`INVOICE_MAIN_ID`),
  CONSTRAINT RECEIPT_PAYMENT_TYPE_ASSOCICATION_ID_FK FOREIGN KEY (PAYMENT_TYPE_ASSOCICATION_ID) REFERENCES payment_type (PAYMENT_TYPE_ID),
  CONSTRAINT RECEIPT_STATUS_ASSOCICATION_ID_FK FOREIGN KEY (STATUS_ASSOCICATION_ID) REFERENCES status (STATUS_ID),
  CONSTRAINT `RECEIPT_RECEIPT_ID_PK` PRIMARY KEY (`RECEIPT_ID`)
);


DROP TABLE IF EXISTS `severity`;
CREATE TABLE severity(
  SEVERITY_ID INT NOT NULL AUTO_INCREMENT,
  SEVERITY_DESCRIPTION VARCHAR(256) NOT NULL,
  CONSTRAINT `SEVERITY_SEVERITY_ID_PK` PRIMARY KEY (`SEVERITY_ID`)
);

DROP TABLE IF EXISTS `activity_detail`;
CREATE TABLE activity_detail(
  ACTIVITY_DETAIL_ID INT NOT NULL AUTO_INCREMENT,
  EMPLOYEE_ASSOCIATION_ID INT NOT NULL,
  EMPLOYEE_NAME VARCHAR(256) NOT NULL,
  EMLOYEE_EMAIL VARCHAR(256) NOT NULL,
  CREATED_BY_MANAGER_ID INT NOT NULL,
  activity_detail VARCHAR(256) NOT NULL,
  CREATED_DATE TIMESTAMP NOT NULL,
  IP_ADDRESS VARCHAR(256) NOT NULL,
  BROWSER_NAME VARCHAR(256) NOT NULL,
  BROWSER_VERSION VARCHAR(256) NOT NULL,
  OPERATING_SYSTEM VARCHAR(256) NOT NULL,
  DEVICE_TYPE VARCHAR(256) NOT NULL,
  SESSION_ID VARCHAR(256) NOT NULL,
  SEVERITY_ASSOCIATION_ID  INT NOT NULL,
  OTHER_INFORMATION BLOB NOT NULL,
  IS_EXCEPTION VARCHAR(10) NOT NULL DEFAULT 'false',
  COMPANY_ASSOCIATION_ID INT NOT NULL,
  CONSTRAINT `ACTIVITY_DETAIL_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
  CONSTRAINT `ACTIVITY_DETAIL_EMPLOYEE_ASSOCIATION_ID_FK` FOREIGN KEY (`EMPLOYEE_ASSOCIATION_ID`) REFERENCES user (`USER_ID`),
  CONSTRAINT `ACTIVITY_DETAIL_CREATTED_BY_MANAGER_ID_FK` FOREIGN KEY (`CREATED_BY_MANAGER_ID`) REFERENCES user (`USER_ID`),
  CONSTRAINT `ACTIVITY_DETAIL_SEVERITY_ASSOCIATION_ID_FK` FOREIGN KEY (`SEVERITY_ASSOCIATION_ID`) REFERENCES severity (`SEVERITY_ID`),
  CONSTRAINT `ACTIVITY_DETAIL_ACTIVITY_DETAIL_ID_PK` PRIMARY KEY (`ACTIVITY_DETAIL_ID`)
);

DROP TABLE IF EXISTS `configuration`;
CREATE TABLE configuration(
	CONFIGURATION_ID INT NOT NULL AUTO_INCREMENT,
	PROPERTY_NAME VARCHAR(256) NOT NULL,
	PROPERTY_VALUE VARCHAR(256) NOT NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,	
	CONSTRAINT `CONFIGURATION_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `CONFIGURATION_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `CONFIGURATION_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `CONFIGURATION_CONFIGURATION_ID_PK` PRIMARY KEY (`CONFIGURATION_ID`)
);

DROP TABLE IF EXISTS `ticket`;
CREATE TABLE ticket(
	TICKET_ID INT NOT NULL AUTO_INCREMENT,
	DESCRIPTION VARCHAR(256) NOT NULL,
	TICKET_DETAIL BLOB NOT NULL,
	SEVERITY_ASSOCIATION_ID INT NOT NULL,
	TICKET_STATUS VARCHAR(256) NOT NULL,
	RE_OPEN VARCHAR(256) NOT NULL,
	RE_OPEN_COUNT INT NOT NULL,
	CREATED_BY INT NOT NULL,
	RESOLVED_BY INT NULL,
	RESOLVED_DATE TIMESTAMP NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `TICKET_TICKET_ID_PK` PRIMARY KEY (`TICKET_ID`),
	CONSTRAINT `TICKET_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `TICKET_RESOLVED_BY_FK` FOREIGN KEY (`RESOLVED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `TICKET_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `TICKET_SEVERITY_ASSOCIATION_ID_FK` FOREIGN KEY (`SEVERITY_ASSOCIATION_ID`) REFERENCES severity (`SEVERITY_ID`)
);

DROP TABLE IF EXISTS `ticket_activity`;
CREATE TABLE ticket_activity(
	TICKET_ACTIVITY_ID INT NOT NULL AUTO_INCREMENT,
	TICKET_ASSOCIATION_ID INT NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	USER_REPLY VARCHAR(256) NOT NULL,
	OLD_STATUS VARCHAR(256) NOT NULL,
	NEW_STATUS VARCHAR(256) NOT NULL,
	RESOLVER_FEEDBACK VARCHAR(256) NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	CONSTRAINT `TICKET_ACTIVITY_TICKET_ACTIVITY_ID_PK` PRIMARY KEY (`TICKET_ACTIVITY_ID`),
	CONSTRAINT `TICKET_ACTIVITY_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `TICKET_ACTIVITY_TICKET_ASSOCIATION_ID_FK` FOREIGN KEY (`TICKET_ASSOCIATION_ID`) REFERENCES ticket (`TICKET_ID`)
);

DROP TABLE IF EXISTS `web_activity_detail`;
CREATE TABLE web_activity_detail(
  WEB_ACTIVITY_DETAIL_ID INT NOT NULL AUTO_INCREMENT,
  EMPLOYEE_ASSOCIATION_ID INT ,
  EMPLOYEE_NAME VARCHAR(256) ,
  EMLOYEE_EMAIL VARCHAR(256) ,
  CREATED_BY_MANAGER_ID INT ,
  ACTIVITY_DETAIL VARCHAR(256),
  CREATED_DATE TIMESTAMP ,
  IP_ADDRESS VARCHAR(256) ,
  BROWSER_NAME VARCHAR(256) ,
  BROWSER_VERSION VARCHAR(256) ,
  OPERATING_SYSTEM VARCHAR(256) ,
  DEVICE_TYPE VARCHAR(256) ,
  SESSION_ID VARCHAR(256) ,
  SEVERITY_ASSOCIATION_ID  INT ,
  OTHER_INFORMATION BLOB ,
  IS_EXCEPTION VARCHAR(10)  DEFAULT 'false',
  CONSTRAINT `WEB_ACTIVITY_DETAIL_WEB_ACTIVITY_DETAIL_ID_PK` PRIMARY KEY (`WEB_ACTIVITY_DETAIL_ID`),
  CONSTRAINT `WEB_ACTIVITY_DETAIL_EMPLOYEE_ASSOCIATION_ID_FK` FOREIGN KEY (`EMPLOYEE_ASSOCIATION_ID`) REFERENCES user (`USER_ID`),
  CONSTRAINT `WEB_ACTIVITY_DETAIL_CREATTED_BY_MANAGER_ID_FK` FOREIGN KEY (`CREATED_BY_MANAGER_ID`) REFERENCES user (`USER_ID`),
  CONSTRAINT `WEB_ACTIVITY_DETAIL_SEVERITY_ASSOCIATION_ID_FK` FOREIGN KEY (`SEVERITY_ASSOCIATION_ID`) REFERENCES severity (`SEVERITY_ID`)
);    

DROP TABLE IF EXISTS `contact_us`;
CREATE TABLE contact_us(
	CONTACT_US_ID INT NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(256) NOT NULL,
	EMAIL VARCHAR(256) NOT NULL,
	MESSAGE VARCHAR(256)  NULL,
	CONTACT_NUMBER VARCHAR(256)  NULL,
	REQUEST_STATUS VARCHAR(256) NOT NULL,
	WEB_ACTIVITY_DETAIL_ID INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `CONTACT_US_CONTACT_US_ID_PK` PRIMARY KEY (`CONTACT_US_ID`),
	CONSTRAINT `CONTACT_US_WEB_ACTIVITY_DETAIL_ID_FK` FOREIGN KEY (`WEB_ACTIVITY_DETAIL_ID`) REFERENCES web_activity_detail (`WEB_ACTIVITY_DETAIL_ID`)
	
);

DROP TABLE IF EXISTS `announcement`;
CREATE TABLE announcement(

 ANNOUNCEMENT_ID INT NOT NULL AUTO_INCREMENT,
 DESCRIPTION VARCHAR(256) NOT NULL,
 ANNOUNCEMENT_DETAIL BLOB NOT NULL,
 ANNOUNCEMENT_DATE DATE NOT NULL,
 CREATED_BY INT NOT NULL,
 UPDATED_BY INT NOT NULL,
 COMPANY_ASSOCIATION_ID INT NOT NULL,
 CREATED_DATE TIMESTAMP NOT NULL,
 LAST_UPDATED TIMESTAMP NOT NULL,
 CONSTRAINT `ANNOUNCEMENT_ANNOUNCEMENT_ID_PK` PRIMARY KEY (`ANNOUNCEMENT_ID`),
 CONSTRAINT `ANNOUNCEMENT_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
 CONSTRAINT `ANNOUNCEMENT_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
 CONSTRAINT `ANNOUNCEMENT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`)
);
DROP TABLE IF EXISTS `notification`;
CREATE TABLE notification(
  NOTIFICATION_ID INT NOT NULL AUTO_INCREMENT,
  NOTIFICATION_TO INT NOT NULL,
  NOTIFICATION_FROM INT NOT NULL,
  NOTIFICATION_ASSOCIATION_ID INT ,
  NOTIFICATION_SUBJECT VARCHAR(256) NOT NULL,
  NOTIFICATION_DESCRIPTION VARCHAR(256) NOT NULL,
  ACTION_TAKEN  VARCHAR(256) NOT NULL,
  MARK_AS_READ  VARCHAR(256) NOT NULL,
  SEVERITY_ASSOCIATION_ID  INT NOT NULL,
  CREATED_DATE DATE NOT NULL,
  LAST_UPDATED TIMESTAMP NOT NULL,
  NOTIFICATION_CREATED_TIME TIME NOT NULL,
  CONSTRAINT `NOTIFICATION_NOTIFICATION_ID_PK` PRIMARY KEY (`NOTIFICATION_ID`),
  CONSTRAINT `NOTIFICATION_NOTIFICATION_ASSOCIATION_ID_FK` FOREIGN KEY (`NOTIFICATION_ASSOCIATION_ID`) REFERENCES notification (`NOTIFICATION_ID`),
  CONSTRAINT `NOTIFICATION_NOTIFICATION_TO_FK` FOREIGN KEY (`NOTIFICATION_TO`) REFERENCES user (`USER_ID`),
  CONSTRAINT `NOTIFICATION_NOTIFICATION_FROM_FK` FOREIGN KEY (`NOTIFICATION_FROM`) REFERENCES user (`USER_ID`),
  CONSTRAINT `NOTIFICATION_SEVERITY_ASSOCIATION_ID_FK` FOREIGN KEY (`SEVERITY_ASSOCIATION_ID`) REFERENCES severity (`SEVERITY_ID`)
);
DROP VIEW IF EXISTS `product_summmary`;
CREATE VIEW product_summmary (ID, PRODUCT_NAME ,SKU ,SUPPLY_PRICE_EXCL_TAX,REORDER_POINT,REORDER_AMOUNT,CURRENT_INVENTORY,NET_PRICE,OUTLET_NAME , OUTLET_ASSOCICATION_ID, CREATED_DATE, 
BRAND_NAME,PRODUCT_TYPE, CONTACT_NAME, VARIANT_COUNT, VARIANT_CURRENT_INVENTORY,VARIANT_SKU,VARIANT_SUPPLY_PRICE_EXCL_TAX,VARIANT_REORDER_POINT,VARIANT_REORDER_AMOUNT,VARIANT_NET_PRICE, VARIANT_COMP_COUNT,COMPANY_ASSOCIATION_ID,IMAGE_PATH,
VARIANT_PRODUCTS,STANDARD_PRODUCT,VARIANT_INVENTORY_COUNT) AS  
SELECT PRODUCT_ID, PRODUCT_NAME,SKU,SUPPLY_PRICE_EXCL_TAX,REORDER_POINT,REORDER_AMOUNT,CURRENT_INVENTORY
,(((SUPPLY_PRICE_EXCL_TAX*MARKUP_PRCT)/100)+SUPPLY_PRICE_EXCL_TAX) AS NET_PRICE,
(select OUTLET_NAME from  outlet WHERE OUTLET_ASSOCICATION_ID = OUTLET_ID) AS OUTLET_NAME ,
OUTLET_ASSOCICATION_ID , CREATED_DATE, (select BRAND_NAME from  brand WHERE BRAND_ASSOCICATION_ID = BRAND_ID) AS BRAND_NAME 
,(select PRODUCT_TYPE_NAME from  product_type WHERE PRODUCT_TYPE_ASSOCICATION_ID = PRODUCT_TYPE_ID) AS PRODUCT_TYPE
,(select CONTACT_NAME from  contact WHERE CONTACT_ASSOCICATION_ID = CONTACT_ID) AS CONTACT_NAME  
,(select COUNT(*) from  product_variant WHERE PRODUCT_ASSOCICATION_ID = PRODUCT_ID AND ACTIVE_INDICATOR=1) AS VARIANT_COUNT
,CURRENT_INVENTORY,SKU,SUPPLY_PRICE_EXCL_TAX,REORDER_POINT,REORDER_AMOUNT
,(((SUPPLY_PRICE_EXCL_TAX*MARKUP_PRCT)/100)+SUPPLY_PRICE_EXCL_TAX) AS VARIANT_NET_PRICE
,(select COUNT(*) from  composite_product WHERE PRODUCT_ASSOCICATION_ID = PRODUCT_ID AND ACTIVE_INDICATOR =1) AS VARIANT_COMP_COUNT
,COMPANY_ASSOCIATION_ID,IMAGE_PATH,VARIANT_PRODUCTS,STANDARD_PRODUCT,(select coalesce(SUM(CURRENT_INVENTORY), 0 )
from  ecom.product_variant WHERE PRODUCT_ASSOCICATION_ID=PRODUCT_ID 
AND ACTIVE_INDICATOR=1 HAVING CURRENT_INVENTORY IS NOT NULL ) AS VARIANT_INVENTORY_COUNT
FROM ecom.product group by PRODUCT_UUID,OUTLET_ASSOCICATION_ID order by CREATED_DATE DESC ;
--  Accounts -------------------------

DROP TABLE IF EXISTS `bank_account`;
CREATE TABLE bank_account(
	BANK_ACCOUNT_ID INT NOT NULL AUTO_INCREMENT,
	BANK_NAME VARCHAR(256) NOT NULL,
	ACCOUNT_NAME VARCHAR(256) NOT NULL,
	ACCOUNT_TYPE VARCHAR(256) NOT NULL,
	ACCOUNT_NUMBER VARCHAR(256) NULL,
	CREDIT_CARD_NUMBER VARCHAR(256) NULL,
	CURRENCY_ASSOCICATION_ID INT NOT NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `BANK_ACCOUNT_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `BANK_ACCOUNT_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `BANK_ACCOUNT_CURRENCY_ASSOCICATION_ID_FK` FOREIGN KEY (CURRENCY_ASSOCICATION_ID) REFERENCES currency (CURRENCY_ID),
	CONSTRAINT `BANK_ACCOUNT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `BANK_ACCOUNT_BANK_ACCOUNT_ID_PK` PRIMARY KEY (`BANK_ACCOUNT_ID`)
);

DROP TABLE IF EXISTS `account_type`;
CREATE TABLE account_type(
	ACCOUNT_TYPE_ID INT NOT NULL AUTO_INCREMENT,
	ACCOUNT_TYPE_NAME VARCHAR(256) NOT NULL,
	MAIN_ACCOUNT_TYPE_INDICATOR BIT NOT NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `ACCOUNT_TYPE_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `ACCOUNT_TYPE_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `ACCOUNT_TYPE_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `ACCOUNT_TYPE_ACCOUNT_TYPE_ID_PK` PRIMARY KEY (`ACCOUNT_TYPE_ID`)
);

DROP TABLE IF EXISTS `general_ledger_event`;
CREATE TABLE general_ledger_event(

	GENERAL_LEDGER_EVENT_ID INT NOT NULL AUTO_INCREMENT,
	GENERAL_LEDGER_EVENT_CODE VARCHAR(256) NOT NULL,
	GENERAL_LEDGER_EVENT_NAME VARCHAR(256) NOT NULL,
	GENERAL_LEDGER_MAIN_EVENT_INDICATOR BIT NOT NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `GENERAL_LEDGER_EVENT_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `GENERAL_LEDGER_EVENT_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `GENERAL_LEDGER_EVENT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `GENERAL_LEDGER_EVENT_GENERAL_LEDGER_EVENT_ID_PK` PRIMARY KEY (`GENERAL_LEDGER_EVENT_ID`)
);

DROP TABLE IF EXISTS `chart_of_account`;
CREATE TABLE chart_of_account(

	CHART_OF_ACCOUNT_ID INT NOT NULL AUTO_INCREMENT,
	CHART_OF_ACCOUNT_CODE VARCHAR(256) NOT NULL,
	CHART_OF_ACCOUNT_NAME VARCHAR(256) NOT NULL,
	ACCOUNT_TYPE_ASSOCIATION_ID INT NOT NULL,
	SALES_TAX_ASSOCIATION_ID INT NOT NULL,
	DESCRIPTION VARCHAR(256) NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `CHART_OF_ACCOUNT_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `CHART_OF_ACCOUNT_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `CHART_OF_ACCOUNT_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `CHART_OF_ACCOUNT_ACCOUNT_TYPE_ASSOCIATION_ID_FK` FOREIGN KEY (`ACCOUNT_TYPE_ASSOCIATION_ID`) REFERENCES account_type (`ACCOUNT_TYPE_ID`),
	CONSTRAINT `CHART_OF_ACCOUNT_SALES_TAX_ASSOCIATION_ID_FK` FOREIGN KEY (`SALES_TAX_ASSOCIATION_ID`) REFERENCES sales_tax (`SALES_TAX_ID`),
	CONSTRAINT `CHART_OF_ACCOUNT_CHART_OF_ACCOUNT_ID_PK` PRIMARY KEY (`CHART_OF_ACCOUNT_ID`)
);

DROP TABLE IF EXISTS `gl_trans_config`;
CREATE TABLE gl_trans_config(

	GL_TRANS_CONFIG_ID INT NOT NULL AUTO_INCREMENT,
	GL_EVENT_ASSOCIATION_ID INT NOT NULL,
	GL_SUB_EVENT_ASSOCIATION_ID INT NOT NULL,
	CHART_OF_ACCOUNT_ASSOCIATION_ID INT NOT NULL,
	ACTION_TYPE VARCHAR(10) NOT NULL, 
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `GL_TRANS_CONFIG_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `GL_TRANS_CONFIG_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `GL_TRANS_CONFIG_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `GL_TRANS_CONFIG_GL_EVENT_ASSOCIATION_ID_FK` FOREIGN KEY (`GL_EVENT_ASSOCIATION_ID`) REFERENCES general_ledger_event (`GENERAL_LEDGER_EVENT_ID`),
	CONSTRAINT `GL_TRANS_CONFIG_GL_SUB_EVENT_ASSOCIATION_ID_FK` FOREIGN KEY (`GL_SUB_EVENT_ASSOCIATION_ID`) REFERENCES general_ledger_event (`GENERAL_LEDGER_EVENT_ID`),
	CONSTRAINT `GL_TRANS_CONFIG_CHART_OF_ACCOUNT_ASSOCIATION_ID_FK` FOREIGN KEY (`CHART_OF_ACCOUNT_ASSOCIATION_ID`) REFERENCES chart_of_account (`CHART_OF_ACCOUNT_ID`),
	CONSTRAINT `GL_TRANS_CONFIG_GL_TRANS_CONFIG_ID_PK` PRIMARY KEY (`GL_TRANS_CONFIG_ID`)
);

DROP TABLE IF EXISTS `module`;
CREATE TABLE module(

	MODULE_ID INT NOT NULL AUTO_INCREMENT,
	MODULE_NAME VARCHAR(256) NOT NULL,
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `MODULE_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `MODULE_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `MODULE_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `MODULE_MODULE_ID_PK` PRIMARY KEY (`MODULE_ID`)
	
);

DROP TABLE IF EXISTS `general_ledger`;
CREATE TABLE general_ledger(

	GENERAL_LEDGER_ID INT NOT NULL AUTO_INCREMENT,
	REFERENCE_ID INT NOT NULL,
	MODULE_ASSOCIATION_ID INT NOT NULL,
	GL_EVENT_ASSOCIATION_ID INT NOT NULL,
	GL_SUB_EVENT_ASSOCIATION_ID INT NOT NULL,
	CHART_OF_ACCOUNT_ASSOCIATION_ID INT NOT NULL,
	DEBIT_AMOUNT DECIMAL(21,5),
	CREDIT_AMOUNT DECIMAL(21,5),
	REMARKS VARCHAR(250),
	BALANCE_AMOUNT DECIMAL(21,5),
	COMPANY_ASSOCIATION_ID INT NOT NULL,
	ACTIVE_INDICATOR BIT NOT NULL,
	CREATED_BY INT NOT NULL,
	UPDATED_BY INT NOT NULL,
	CREATED_DATE TIMESTAMP NOT NULL,
	LAST_UPDATED TIMESTAMP NOT NULL,
	CONSTRAINT `GENERAL_LEDGER_CREATED_BY_FK` FOREIGN KEY (`CREATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `GENERAL_LEDGER_UPDATED_BY_FK` FOREIGN KEY (`UPDATED_BY`) REFERENCES user (`USER_ID`),
	CONSTRAINT `GENERAL_LEDGER_COMPANY_ASSOCIATION_ID_FK` FOREIGN KEY (`COMPANY_ASSOCIATION_ID`) REFERENCES company (`COMPANY_ID`),
	CONSTRAINT `GENERAL_LEDGER_MODULE_ASSOCIATION_ID_FK` FOREIGN KEY (`MODULE_ASSOCIATION_ID`) REFERENCES module (`MODULE_ID`),
	CONSTRAINT `GENERAL_LEDGER_GL_EVENT_ASSOCIATION_ID_FK` FOREIGN KEY (`GL_EVENT_ASSOCIATION_ID`) REFERENCES general_ledger_event (`GENERAL_LEDGER_EVENT_ID`),
	CONSTRAINT `GENERAL_LEDGER_GL_SUB_EVENT_ASSOCIATION_ID_FK` FOREIGN KEY (`GL_SUB_EVENT_ASSOCIATION_ID`) REFERENCES general_ledger_event (`GENERAL_LEDGER_EVENT_ID`),
	CONSTRAINT `GENERAL_LEDGER_CHART_OF_ACCOUNT_ASSOCIATION_ID_FK` FOREIGN KEY (`CHART_OF_ACCOUNT_ASSOCIATION_ID`) REFERENCES chart_of_account (`CHART_OF_ACCOUNT_ID`),
	CONSTRAINT `GENERAL_LEDGER_GENERAL_LEDGER_ID_PK` PRIMARY KEY (`GENERAL_LEDGER_ID`)
);

DELIMITER $$

DROP PROCEDURE IF EXISTS `ecom`.`Pivot`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `Pivot`(
    IN tbl_name VARCHAR(100),       -- table name (or db.tbl)
    IN main_base_cols VARCHAR(500),      -- main base columns
    IN base_cols VARCHAR(500),      -- column(s) on the left, separated by commas
    IN pivot_col VARCHAR(100),      -- name of column to put across the top
    IN tally_col VARCHAR(500),      -- name of column to SUM up
    IN where_clause VARCHAR(500),   -- empty string or "WHERE ..."
    IN order_by VARCHAR(500),        -- empty string or "ORDER BY ..."; usually the base_cols
    IN group_by VARCHAR(500)        -- empty string or "ORDER BY ..."; usually the base_cols
)
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN
 -- Find the distinct values
    -- Build the SUM()s
    SET @subq = CONCAT('SELECT DISTINCT ', pivot_col, ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' ORDER BY 1');
    -- select @subq;
    SET @cc1 = "CONCAT('SUM(IF(&p = ', &v, ', &t, 0)) AS ', &v)";
    SET @cc2 = REPLACE(@cc1, '&p', pivot_col);
    SET @cc3 = REPLACE(@cc2, '&t', tally_col);
    -- select @cc2, @cc3;
    SET @qval = CONCAT("'\"', val, '\"'");
    -- select @qval;
    SET @cc4 = REPLACE(@cc3, '&v', @qval);
    -- select @cc4;
    SET SESSION group_concat_max_len = 10000;   -- just in case
    SET @stmt = CONCAT(
            'SELECT  GROUP_CONCAT(', @cc4, ' SEPARATOR ",\n")  INTO @sums',
            ' FROM ( ', @subq, ' ) AS top');
    -- select @stmt;
   -- select @sums;
    PREPARE _sql FROM @stmt;
    EXECUTE _sql;                      -- Intermediate step: build SQL for columns
    DEALLOCATE PREPARE _sql;
    -- Construct the query and perform it
    SET @stmt2 = CONCAT(
            'SELECT ',
                main_base_cols, ',\n',
                @sums, ',\n',base_cols,
            '\n FROM ', tbl_name, ' ',
            where_clause,
            ' GROUP BY ', group_by , ' WITH ROLLUP',
            '\n', order_by
        );
    --  select @stmt2;                    -- The statement that generates the result
    PREPARE _sql FROM @stmt2;
    EXECUTE _sql;                     -- The resulting pivot table ouput
    DEALLOCATE PREPARE _sql;
    -- For debugging / tweaking, SELECT the various @variables after CALLing.
    END$$

DELIMITER ;




DELIMITER $$

DROP PROCEDURE IF EXISTS `ecom`.`Pivot_Summarize`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `Pivot_Summarize`(
    IN tbl_name VARCHAR(100),       -- table name (or db.tbl)
    IN main_base_cols VARCHAR(500),      -- main base columns
    IN base_cols VARCHAR(500),      -- column(s) on the left, separated by commas
    IN pivot_col VARCHAR(100),      -- name of column to put across the top
    IN tally_col VARCHAR(500),      -- name of column to SUM up
    IN where_clause VARCHAR(500),   -- empty string or "WHERE ..."
    IN order_by VARCHAR(500),        -- empty string or "ORDER BY ..."; usually the base_cols
    IN group_by VARCHAR(500),        -- empty string or "group BY ..."; usually the base_cols
    IN summarized_criteria VARCHAR(100)        -- summarized criteria e.g. "weekly" ,"monthly", "yearly"
)
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN
 -- Find the distinct values
    -- Build the SUM()s
	SET @selectFormat = '';
	-- SET @groupbyFormat = '';
    IF summarized_criteria = 'monthly' THEN SET @selectFormat = '%b-%y';
    ELSEIF summarized_criteria = 'yearly' THEN SET @selectFormat = '%Y';
    ELSEIF summarized_criteria = 'weekly' THEN SET @selectFormat = '%e-%b-%y';
    END IF;
    IF summarized_criteria = 'weekly' 
	THEN SET @subq = CONCAT('SELECT DISTINCT ', 'DATE_FORMAT(DATE_ADD(',pivot_col,',','INTERVAL(1-DAYOFWEEK(',pivot_col,')) DAY),' ,"'", @selectFormat,"'",')'  , ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' Group by ','DATE_FORMAT(',pivot_col,',',"'" , @selectFormat,"'" ,')', ' ORDER BY ',pivot_col);

    ELSEIF summarized_criteria = 'quaterly' 
	THEN 
	Set @quaterlySelectCriteria = CONCAT('CONCAT(', 'YEAR(',pivot_col,'),','''-''',',QUARTER(',pivot_col,')'  ,')');
	Set @quaterlyGroupbyCriteria = CONCAT('YEAR(',pivot_col,'),', 'QUARTER(',pivot_col,')' );

	SET @subq = CONCAT('SELECT DISTINCT ',@quaterlySelectCriteria  , ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' Group by ',@quaterlyGroupbyCriteria, ' ORDER BY ',@quaterlyGroupbyCriteria);
    ELSE
      SET @subq =  CONCAT('SELECT DISTINCT ', ''  , ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' Group by ','DATE_FORMAT(',pivot_col,',',"'" , @selectFormat,"'" ,')', ' ORDER BY ', pivot_col);
	 END IF;
   -- select @subq;
    IF summarized_criteria = 'weekly' 
	THEN
		SET @updatedPivotColumn = CONCAT('DATE_FORMAT(DATE_ADD(',pivot_col,',','INTERVAL(1-DAYOFWEEK(',pivot_col,')) DAY),' ,"''", @selectFormat,"''",')');
	ELSEIF summarized_criteria = 'quaterly' 
	THEN
		SET @updatedPivotColumn = CONCAT('CONCAT(', 'YEAR(',pivot_col,'),',"''-''",',QUARTER(',pivot_col,')'  ,')');
    ELSE
	SET @updatedPivotColumn = CONCAT('DATE_FORMAT(',pivot_col,',', "''", @selectFormat,"''",')');
    END IF;
    -- select @updatedPivotColumn;
    SET @cc1 = "CONCAT('SUM(IF(&p = ', &v, ', &t, 0)) AS ', &v)";
   -- select @cc1;
    SET @cc2 = REPLACE(@cc1, '&p' ,@updatedPivotColumn );
    -- select @cc1, @cc2;
    SET @cc3 = REPLACE(@cc2, '&t', tally_col);
    -- select @cc2, @cc3;
    SET @qval = CONCAT("'\"', val, '\"'");
    -- select @qval;
    SET @cc4 = REPLACE(@cc3, '&v', @qval);
    -- select @cc4;
    SET SESSION group_concat_max_len = 10000;   -- just in case
    SET @stmt = CONCAT(
            'SELECT  GROUP_CONCAT(', @cc4, ' SEPARATOR ",\n")  INTO @sums',
            ' FROM ( ', @subq, ' ) AS top');
    -- select @stmt;
    -- select @sums;
    PREPARE _sql FROM @stmt;
    EXECUTE _sql;                      -- Intermediate step: build SQL for columns
    DEALLOCATE PREPARE _sql;
    -- Construct the query and perform it
    SET @stmt2 = CONCAT(
            'SELECT  ',
                main_base_cols, ',\n',
                @sums, ',\n',base_cols,
            '\n FROM ', tbl_name, ' ',
            where_clause,
           ' GROUP BY ', group_by, ' WITH ROLLUP',
           -- ' GROUP BY ', group_by, ',',@updatedPivotColumn , ' WITH ROLLUP',
            '\n', order_by
        );
    --  select @stmt2;                    -- The statement that generates the result
    PREPARE _sql FROM @stmt2;
    EXECUTE _sql;                     -- The resulting pivot table ouput
    DEALLOCATE PREPARE _sql;
    -- For debugging / tweaking, SELECT the various @variables after CALLing.
    END$$

DELIMITER ;