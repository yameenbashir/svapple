package com.dowhile;

// Generated Dec 17, 2017 11:56:05 AM by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Contact generated by hbm2java
 */
@Entity
@Table(name = "contact")
public class Contact implements java.io.Serializable {

	private Integer contactId;
	private Outlet outlet;
	private Company company;
	private ContactGroup contactGroup;
	private String contactName;
	private Date dob;
	private String gender;
	private String contactCode;
	private String firstName;
	private String lastName;
	private BigDecimal defaultMarkup;
	private BigDecimal contactBalance;
	private String description;
	private String loyaltyEnabled;
	private String companyName;
	private boolean activeIndicator;
	private Date createdDate;
	private Date lastUpdated;
	private Integer contactOutletId;
	private Integer createdBy;
	private Integer updatedBy;
	private String contactType;
	private Set<Loyalty> loyalties = new HashSet<Loyalty>(0);
	private Set<Receipt> receipts = new HashSet<Receipt>(0);
	private Set<Product> products = new HashSet<Product>(0);
	private Set<Address> addresses = new HashSet<Address>(0);
	private Set<User> users = new HashSet<User>(0);
	private Set<ContactPayments> contactPaymentses = new HashSet<ContactPayments>(
			0);
	private Set<InvoiceMain> invoiceMains = new HashSet<InvoiceMain>(0);
	private Set<OrderMain> orderMains = new HashSet<OrderMain>(0);

	public Contact() {
	}

	public Contact(Outlet outlet, Company company, String contactName,
			boolean activeIndicator, Date createdDate, Date lastUpdated,
			String contactType) {
		this.outlet = outlet;
		this.company = company;
		this.contactName = contactName;
		this.activeIndicator = activeIndicator;
		this.createdDate = createdDate;
		this.lastUpdated = lastUpdated;
		this.contactType = contactType;
	}

	public Contact(Outlet outlet, Company company, ContactGroup contactGroup,
			String contactName, Date dob, String gender, String contactCode,
			String firstName, String lastName, BigDecimal defaultMarkup,
			BigDecimal contactBalance, String description,
			String loyaltyEnabled, String companyName, boolean activeIndicator,
			Date createdDate, Date lastUpdated, Integer contactOutletId,
			Integer createdBy, Integer updatedBy, String contactType,
			Set<Loyalty> loyalties, Set<Receipt> receipts,
			Set<Product> products, Set<Address> addresses, Set<User> users,
			Set<ContactPayments> contactPaymentses,
			Set<InvoiceMain> invoiceMains, Set<OrderMain> orderMains) {
		this.outlet = outlet;
		this.company = company;
		this.contactGroup = contactGroup;
		this.contactName = contactName;
		this.dob = dob;
		this.gender = gender;
		this.contactCode = contactCode;
		this.firstName = firstName;
		this.lastName = lastName;
		this.defaultMarkup = defaultMarkup;
		this.contactBalance = contactBalance;
		this.description = description;
		this.loyaltyEnabled = loyaltyEnabled;
		this.companyName = companyName;
		this.activeIndicator = activeIndicator;
		this.createdDate = createdDate;
		this.lastUpdated = lastUpdated;
		this.contactOutletId = contactOutletId;
		this.createdBy = createdBy;
		this.updatedBy = updatedBy;
		this.contactType = contactType;
		this.loyalties = loyalties;
		this.receipts = receipts;
		this.products = products;
		this.addresses = addresses;
		this.users = users;
		this.contactPaymentses = contactPaymentses;
		this.invoiceMains = invoiceMains;
		this.orderMains = orderMains;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "CONTACT_ID", unique = true, nullable = false)
	public Integer getContactId() {
		return this.contactId;
	}

	public void setContactId(Integer contactId) {
		this.contactId = contactId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "OUTLET_ASSOCIATION_ID", nullable = false)
	public Outlet getOutlet() {
		return this.outlet;
	}

	public void setOutlet(Outlet outlet) {
		this.outlet = outlet;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COMPANY_ASSOCIATION_ID", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CONTACT_GROUP_ASSOCIATION_ID")
	public ContactGroup getContactGroup() {
		return this.contactGroup;
	}

	public void setContactGroup(ContactGroup contactGroup) {
		this.contactGroup = contactGroup;
	}

	@Column(name = "CONTACT_NAME", nullable = false, length = 200)
	public String getContactName() {
		return this.contactName;
	}

	public void setContactName(String contactName) {
		this.contactName = contactName;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DOB", length = 10)
	public Date getDob() {
		return this.dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	@Column(name = "GENDER", length = 10)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "CONTACT_CODE", length = 200)
	public String getContactCode() {
		return this.contactCode;
	}

	public void setContactCode(String contactCode) {
		this.contactCode = contactCode;
	}

	@Column(name = "FIRST_NAME", length = 200)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "LAST_NAME", length = 200)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "DEFAULT_MARKUP", precision = 5)
	public BigDecimal getDefaultMarkup() {
		return this.defaultMarkup;
	}

	public void setDefaultMarkup(BigDecimal defaultMarkup) {
		this.defaultMarkup = defaultMarkup;
	}

	@Column(name = "CONTACT_BALANCE", precision = 20, scale = 5)
	public BigDecimal getContactBalance() {
		return this.contactBalance;
	}

	public void setContactBalance(BigDecimal contactBalance) {
		this.contactBalance = contactBalance;
	}

	@Column(name = "DESCRIPTION", length = 1000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "LOYALTY_ENABLED", length = 10)
	public String getLoyaltyEnabled() {
		return this.loyaltyEnabled;
	}

	public void setLoyaltyEnabled(String loyaltyEnabled) {
		this.loyaltyEnabled = loyaltyEnabled;
	}

	@Column(name = "COMPANY_NAME", length = 100)
	public String getCompanyName() {
		return this.companyName;
	}

	public void setCompanyName(String companyName) {
		this.companyName = companyName;
	}

	@Column(name = "ACTIVE_INDICATOR", nullable = false)
	public boolean isActiveIndicator() {
		return this.activeIndicator;
	}

	public void setActiveIndicator(boolean activeIndicator) {
		this.activeIndicator = activeIndicator;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_DATE", nullable = false, length = 19)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_UPDATED", nullable = false, length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "CONTACT_OUTLET_ID")
	public Integer getContactOutletId() {
		return this.contactOutletId;
	}

	public void setContactOutletId(Integer contactOutletId) {
		this.contactOutletId = contactOutletId;
	}

	@Column(name = "CREATED_BY")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "UPDATED_BY")
	public Integer getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(Integer updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Column(name = "CONTACT_TYPE", nullable = false, length = 250)
	public String getContactType() {
		return this.contactType;
	}

	public void setContactType(String contactType) {
		this.contactType = contactType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<Loyalty> getLoyalties() {
		return this.loyalties;
	}

	public void setLoyalties(Set<Loyalty> loyalties) {
		this.loyalties = loyalties;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<Receipt> getReceipts() {
		return this.receipts;
	}

	public void setReceipts(Set<Receipt> receipts) {
		this.receipts = receipts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<Product> getProducts() {
		return this.products;
	}

	public void setProducts(Set<Product> products) {
		this.products = products;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<ContactPayments> getContactPaymentses() {
		return this.contactPaymentses;
	}

	public void setContactPaymentses(Set<ContactPayments> contactPaymentses) {
		this.contactPaymentses = contactPaymentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<InvoiceMain> getInvoiceMains() {
		return this.invoiceMains;
	}

	public void setInvoiceMains(Set<InvoiceMain> invoiceMains) {
		this.invoiceMains = invoiceMains;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contact")
	public Set<OrderMain> getOrderMains() {
		return this.orderMains;
	}

	public void setOrderMains(Set<OrderMain> orderMains) {
		this.orderMains = orderMains;
	}

}
