USE `ecom`;
alter table price_book_detail
ADD UUID VARCHAR(500) NOT NULL ;

delete from  price_book_detail ;

update price_book set OUTLET_ASSOCICATION_ID = NULL;
DROP VIEW IF EXISTS Price_Book_Detail_Summary;
CREATE VIEW Price_Book_Detail_Summary AS 
SELECT 
PRICE_BOOK_DETAIL_ID,PRICE_BOOK_ASSOCICATION_ID,PRODUCT_ASSOCICATION_ID,UUID,
(select PRODUCT_NAME from ecom.product where PRODUCT_ID=PRODUCT_ASSOCICATION_ID)as 'PRODUCT_NAME',
IFNULL(PRODUCT_VARIENT_ASSOCICATION_ID,0) as PRODUCT_VARIENT_ASSOCICATION_ID,
COALESCE((select VARIANT_ATTRIBUTE_NAME from ecom.product_variant where PRODUCT_VARIANT_ID=PRODUCT_VARIENT_ASSOCICATION_ID),'-' )as 'VARIANT_ATTRIBUTE_NAME',
SUPPLY_PRICE,MARKUP,DISCOUNT,CREATED_BY,UPDATED_BY,SALES_TAX_ASSOCIATION_ID,COMPANY_ASSOCIATION_ID
from ecom.price_book_detail where ACTIVE_INDICATOR="1";

-- --------Configuration-------------------
insert into configuration (PROPERTY_NAME,PROPERTY_VALUE,COMPANY_ASSOCIATION_ID,CREATED_BY,UPDATED_BY,CREATED_DATE,LAST_UPDATED,ACTIVE_INDICATOR) values ('HIDE_ORIGNAL_PRICE_INFO_REPORTS','true',1,1,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,1);




-- --------------------------------
USE `ecom`;


DROP VIEW IF EXISTS User_Sales_Report;
CREATE VIEW User_Sales_Report AS 

SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select CONCAT(FIRST_NAME, ' ',LAST_NAME) from user where user.USER_ID=ecom.invoice_detail.CREATED_BY) AS 'User',
(select OUTLET_NAME from outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) AS Revenue,(SUM(ITEM_SALE_PRICE* PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT* PRODUCT_QUANTITY ))  AS 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) AS 'Cost_of_Goods', 
(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) -SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY )) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM invoice_detail
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by PRODUCT_ASSOCIATION_ID, DATE(CREATED_DATE)
Order by  DATE(invoice_main.CREATED_DATE);



DROP VIEW IF EXISTS Outlet_Sales_Report;
CREATE VIEW Outlet_Sales_Report AS 
SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select OUTLET_NAME from ecom.outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )  AS Revenue,(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT * PRODUCT_QUANTITY )) AS 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) AS 'Cost_of_Goods', 
((SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ))-(SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ))) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM ecom.invoice_detail
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by PRODUCT_ASSOCIATION_ID, DATE(invoice_main.CREATED_DATE)
Order by  DATE(invoice_main.CREATED_DATE);






DROP VIEW IF EXISTS Brand_Sales_Report;
CREATE VIEW Brand_Sales_Report AS 
SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select OUTLET_NAME from ecom.outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
(select BRAND_NAME from ecom.brand where BRAND_ID = (select BRAND_ASSOCICATION_ID from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID)) AS 'Brand',
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) AS Revenue,(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT * PRODUCT_QUANTITY )) AS 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) AS 'Cost_of_Goods', 
(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )-SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY )) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM ecom.invoice_detail
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by PRODUCT_ASSOCIATION_ID, DATE(CREATED_DATE)
Order by  DATE(CREATED_DATE);





DROP VIEW IF EXISTS ProductType_Sales_Report;
CREATE VIEW ProductType_Sales_Report AS 
SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select OUTLET_NAME from ecom.outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
(select PRODUCT_TYPE_NAME from ecom.product_type where PRODUCT_TYPE_ID = (select PRODUCT_TYPE_ASSOCICATION_ID from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID)) AS 'ProductType',
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )  AS Revenue,(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT * PRODUCT_QUANTITY )) AS 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) AS 'Cost_of_Goods', 
(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) -SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) ) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM ecom.invoice_detail
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by PRODUCT_ASSOCIATION_ID, DATE(CREATED_DATE)
Order by  DATE(CREATED_DATE);



DROP VIEW IF EXISTS Inventory_Report;
CREATE VIEW Inventory_Report(ID,PRODUCT_NAME ,SKU ,SUPPLY_PRICE_EXCL_TAX,MARKUP_PRCT,REORDER_POINT,REORDER_AMOUNT,CURRENT_INVENTORY,NET_PRICE,OUTLET_NAME , OUTLET_ASSOCICATION_ID, CREATED_DATE, 
BRAND_NAME,PRODUCT_TYPE, CONTACT_NAME,COMPANY_ASSOCIATION_ID,STOCK_VALUE,RETAIL_VALUE) AS 
(SELECT PRODUCT_ID, PRODUCT_NAME,SKU,SUPPLY_PRICE_EXCL_TAX,MARKUP_PRCT,COALESCE(REORDER_POINT,0),COALESCE(REORDER_AMOUNT,0),CURRENT_INVENTORY
,(((SUPPLY_PRICE_EXCL_TAX*MARKUP_PRCT)/100)+SUPPLY_PRICE_EXCL_TAX) AS NET_PRICE,
(select OUTLET_NAME from  outlet WHERE OUTLET_ASSOCICATION_ID = OUTLET_ID) AS OUTLET_NAME ,
OUTLET_ASSOCICATION_ID , CREATED_DATE, (select BRAND_NAME from  brand WHERE BRAND_ASSOCICATION_ID = BRAND_ID) AS BRAND_NAME 
,(select PRODUCT_TYPE_NAME from  product_type WHERE PRODUCT_TYPE_ASSOCICATION_ID = PRODUCT_TYPE_ID) AS PRODUCT_TYPE
,(select CONTACT_NAME from  contact WHERE CONTACT_ASSOCICATION_ID = CONTACT_ID) AS CONTACT_NAME,  
COMPANY_ASSOCIATION_ID,(SUPPLY_PRICE_EXCL_TAX*CURRENT_INVENTORY) as STOCK_VALUE,
((((SUPPLY_PRICE_EXCL_TAX*MARKUP_PRCT)/100)+SUPPLY_PRICE_EXCL_TAX)*CURRENT_INVENTORY) As RETAIL_VALUE
FROM ecom.product where VARIANT_PRODUCTS='false' group by PRODUCT_UUID,OUTLET_ASSOCICATION_ID order by CREATED_DATE DESC )
UNION
(SELECT PRODUCT_VARIANT_ID, 
(CONCAT((select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCICATION_ID=PRODUCT_ID), ' ',VARIANT_ATTRIBUTE_NAME) )as VARIANT_ATTRIBUTE_NAME,
SKU,SUPPLY_PRICE_EXCL_TAX,MARKUP_PRCT,COALESCE(REORDER_POINT,0),COALESCE(REORDER_AMOUNT,0),CURRENT_INVENTORY
,(((SUPPLY_PRICE_EXCL_TAX*MARKUP_PRCT)/100)+SUPPLY_PRICE_EXCL_TAX) AS NET_PRICE,
(select OUTLET_NAME from  outlet WHERE OUTLET_ASSOCICATION_ID = OUTLET_ID) AS OUTLET_NAME ,
OUTLET_ASSOCICATION_ID , CREATED_DATE, 
(select BRAND_NAME from ecom.brand where BRAND_ID = (select BRAND_ASSOCICATION_ID from ecom.product where PRODUCT_ASSOCICATION_ID=PRODUCT_ID)) AS BRAND_NAME,
(select PRODUCT_TYPE_NAME from ecom.product_type where PRODUCT_TYPE_ID = (select PRODUCT_TYPE_ASSOCICATION_ID from ecom.product where PRODUCT_ASSOCICATION_ID=PRODUCT_ID)) AS PRODUCT_TYPE,
(select CONTACT_NAME from  contact WHERE CONTACT_ID = (select CONTACT_ASSOCICATION_ID from ecom.product where PRODUCT_ASSOCICATION_ID=PRODUCT_ID)) AS CONTACT_NAME,
COMPANY_ASSOCIATION_ID,(SUPPLY_PRICE_EXCL_TAX*CURRENT_INVENTORY) as STOCK_VALUE,
((((SUPPLY_PRICE_EXCL_TAX*MARKUP_PRCT)/100)+SUPPLY_PRICE_EXCL_TAX)*CURRENT_INVENTORY) As RETAIL_VALUE
FROM ecom.product_variant group by PRODUCT_VARIANT_UUID,OUTLET_ASSOCICATION_ID order by CREATED_DATE DESC);

DROP VIEW IF EXISTS Payment_Report;
CREATE VIEW Payment_Report AS 
SELECT 
OUTLET_ASSOCICATION_ID,(select OUTLET_NAME from ecom.outlet where OUTLET_ASSOCICATION_ID=OUTLET_ID) As 'OUTLET',

DATE(CREATED_DATE) AS CREATED_DATE, SUM(INVOICE_NET_AMT) AS AMOUNT,
COMPANY_ASSOCIATION_ID
FROM ecom.invoice_main 
where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by COMPANY_ASSOCIATION_ID,OUTLET_ASSOCICATION_ID, DATE(CREATED_DATE)
Order by  DATE(CREATED_DATE);


DROP VIEW IF EXISTS Supplier_Sales_Report;
CREATE VIEW Supplier_Sales_Report AS 
SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select OUTLET_NAME from ecom.outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
(select CONTACT_NAME from ecom.contact where CONTACT_TYPE LIKE '%SUPPLIER%' AND CONTACT_ID = (select CONTACT_ASSOCICATION_ID from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID)) AS 'Supplier',
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) AS Revenue,(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT * PRODUCT_QUANTITY )) AS 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) 'Cost_of_Goods', 
(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) - SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY )) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM ecom.invoice_detail
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by Supplier, DATE(CREATED_DATE)
Order by  DATE(CREATED_DATE);


DROP VIEW IF EXISTS Customer_Sales_Report;
CREATE VIEW Customer_Sales_Report AS 
SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select OUTLET_NAME from ecom.outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
COALESCE((select CONTACT_NAME  from ecom.contact where CONTACT_TYPE LIKE '%CUSTOMER%' AND CONTACT_ID = (select CONTACT_ASSOCIATION_ID from ecom.invoice_main where INVOICE_MAIN_ASSOCICATION_ID=INVOICE_MAIN_ID)),'-') AS 'Customer' ,
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) AS Revenue,(SUM(ITEM_SALE_PRICE* PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT* PRODUCT_QUANTITY )) 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY )  AS 'Cost_of_Goods', 
(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )  - SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) ) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM ecom.invoice_detail 
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by Customer, DATE(CREATED_DATE)
Order by  DATE(CREATED_DATE);

DROP VIEW IF EXISTS Customer_Group_Sales_Report;
CREATE VIEW Customer_Group_Sales_Report AS 
SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select OUTLET_NAME from ecom.outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
COALESCE((select CONTACT_GROUP_NAME from contact_group where CONTACT_GROUP_ID  = (select CONTACT_GROUP_ASSOCIATION_ID  from ecom.contact where CONTACT_TYPE LIKE '%CUSTOMER%' AND CONTACT_ID = (select CONTACT_ASSOCIATION_ID from ecom.invoice_main where INVOICE_MAIN_ASSOCICATION_ID=INVOICE_MAIN_ID))),'-') AS 'Group_Name' ,
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY ) AS Revenue,(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT) * PRODUCT_QUANTITY )  AS 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT* PRODUCT_QUANTITY )  AS 'Cost_of_Goods', 
(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )  -SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) ) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM ecom.invoice_detail 
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by Group_Name, DATE(CREATED_DATE)
Order by  DATE(CREATED_DATE);




DROP VIEW IF EXISTS Temp_Sale;
CREATE VIEW Temp_Sale AS 
SELECT 
(select PRODUCT_NAME from ecom.product where PRODUCT_ASSOCIATION_ID=PRODUCT_ID) AS 'Product',
(select OUTLET_NAME from ecom.outlet where invoice_main.OUTLET_ASSOCICATION_ID=OUTLET_ID) AS 'Outlet',
DATE(invoice_main.CREATED_DATE) AS CREATED_DATE, SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY)  AS Revenue,(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )+SUM(ITEM_TAX_AMOUNT * PRODUCT_QUANTITY )) AS 'Revenue_tax_incl', SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY ) AS 'Cost_of_Goods', 
(SUM(ITEM_SALE_PRICE * PRODUCT_QUANTITY )-SUM(ITEM_ORIGNAL_AMT * PRODUCT_QUANTITY )) As 'Gross_Profit', 
COALESCE((100-((SUM(ITEM_ORIGNAL_AMT))/(SUM(ITEM_SALE_PRICE)))*100),0) As Margin,
SUM(PRODUCT_QUANTITY) AS 'Items_Sold',
SUM(ITEM_TAX_AMOUNT) AS Tax,
invoice_main.COMPANY_ASSOCIATION_ID,invoice_main.OUTLET_ASSOCICATION_ID
FROM ecom.invoice_detail
inner join invoice_main on INVOICE_MAIN_ID = INVOICE_MAIN_ASSOCICATION_ID 
 where invoice_main.STATUS_ASSOCICATION_ID <> 11
group by PRODUCT_ASSOCIATION_ID, DATE(CREATED_DATE)
Order by  DATE(CREATED_DATE);

DROP VIEW IF EXISTS Register_Report;
CREATE VIEW Register_Report AS 
SELECT 
OUTLET_ASSOCICATION_ID,(select OUTLET_NAME from ecom.outlet where OUTLET_ASSOCICATION_ID=OUTLET_ID) As 'OUTLET_NAME',
IFNULL(CASH_AMT_ACTUAL, 0)as CASH_AMT_ACTUAL ,IFNULL(CREDIT_CARD_AMT_ACTUAL, 0) as CREDIT_CARD_AMT_ACTUAL,
DATE_FORMAT(CREATED_DATE,'%b %d %Y %h:%i %p')OPENING_DATE,DATE_FORMAT(CLOSED_DATE,'%b %d %Y %h:%i %p') CLOSING_DATE,
(select CONCAT(FIRST_NAME, ' ',LAST_NAME) from ecom.user where ecom.user.USER_ID=daily_register.CREATED_BY) AS 'Open_By',
COALESCE((select CONCAT(FIRST_NAME, ' ',LAST_NAME) from ecom.user where ecom.user.USER_ID=daily_register.UPDATED_BY),daily_register.CREATED_BY) AS 'Close_By',
(select STATUS_DESC from ecom.status where ecom.status.STATUS_ID=STATUS_ASSOCICATION_ID) AS 'Status',
COMPANY_ASSOCIATION_ID
FROM ecom.daily_register 
Order by  DATE(CREATED_DATE);




-- --------------------SP--------------------


USE `ecom`;
DELIMITER $$

DROP PROCEDURE IF EXISTS `ecom`.`Pivot`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `Pivot`(
    IN tbl_name VARCHAR(100),       -- table name (or db.tbl)
    IN main_base_cols VARCHAR(500),      -- main base columns
    IN base_cols VARCHAR(500),      -- column(s) on the left, separated by commas
    IN pivot_col VARCHAR(100),      -- name of column to put across the top
    IN tally_col VARCHAR(500),      -- name of column to SUM up
    IN where_clause VARCHAR(500),   -- empty string or "WHERE ..."
    IN order_by VARCHAR(500),        -- empty string or "ORDER BY ..."; usually the base_cols
    IN group_by VARCHAR(500)        -- empty string or "ORDER BY ..."; usually the base_cols
)
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN
 -- Find the distinct values
    -- Build the SUM()s
    SET @subq = CONCAT('SELECT DISTINCT ', pivot_col, ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' ORDER BY 1');
    -- select @subq;
    SET @cc1 = "CONCAT('SUM(IF(&p = ', &v, ', &t, 0)) AS ', &v)";
    SET @cc2 = REPLACE(@cc1, '&p', pivot_col);
    SET @cc3 = REPLACE(@cc2, '&t', tally_col);
    -- select @cc2, @cc3;
    SET @qval = CONCAT("'\"', val, '\"'");
    -- select @qval;
    SET @cc4 = REPLACE(@cc3, '&v', @qval);
    -- select @cc4;
    SET SESSION group_concat_max_len = 10000;   -- just in case
    SET @stmt = CONCAT(
            'SELECT  GROUP_CONCAT(', @cc4, ' SEPARATOR ",\n")  INTO @sums',
            ' FROM ( ', @subq, ' ) AS top');
    -- select @stmt;
   -- select @sums;
    PREPARE _sql FROM @stmt;
    EXECUTE _sql;                      -- Intermediate step: build SQL for columns
    DEALLOCATE PREPARE _sql;
    -- Construct the query and perform it
    SET @stmt2 = CONCAT(
            'SELECT ',
                main_base_cols, ',\n',
                @sums, ',\n',base_cols,
            '\n FROM ', tbl_name, ' ',
            where_clause,
            ' GROUP BY ', group_by , ' WITH ROLLUP',
            '\n', order_by
        );
    --  select @stmt2;                    -- The statement that generates the result
    PREPARE _sql FROM @stmt2;
    EXECUTE _sql;                     -- The resulting pivot table ouput
    DEALLOCATE PREPARE _sql;
    -- For debugging / tweaking, SELECT the various @variables after CALLing.
    END$$

DELIMITER ;



DELIMITER $$

DROP PROCEDURE IF EXISTS `ecom`.`Pivot_Summarize`$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `Pivot_Summarize`(
    IN tbl_name VARCHAR(100),       -- table name (or db.tbl)
    IN main_base_cols VARCHAR(500),      -- main base columns
    IN base_cols VARCHAR(500),      -- column(s) on the left, separated by commas
    IN pivot_col VARCHAR(100),      -- name of column to put across the top
    IN tally_col VARCHAR(500),      -- name of column to SUM up
    IN where_clause VARCHAR(500),   -- empty string or "WHERE ..."
    IN order_by VARCHAR(500),        -- empty string or "ORDER BY ..."; usually the base_cols
    IN group_by VARCHAR(500),        -- empty string or "group BY ..."; usually the base_cols
    IN summarized_criteria VARCHAR(100)        -- summarized criteria e.g. "weekly" ,"monthly", "yearly"
)
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN
 -- Find the distinct values
    -- Build the SUM()s
	SET @selectFormat = '';
	-- SET @groupbyFormat = '';
    IF summarized_criteria = 'monthly' THEN SET @selectFormat = '%b-%y';
    ELSEIF summarized_criteria = 'yearly' THEN SET @selectFormat = '%Y';
    ELSEIF summarized_criteria = 'weekly' THEN SET @selectFormat = '%e-%b-%y';
    END IF;
    IF summarized_criteria = 'weekly' 
	THEN SET @subq = CONCAT('SELECT DISTINCT ', 'DATE_FORMAT(DATE_ADD(',pivot_col,',','INTERVAL(1-DAYOFWEEK(',pivot_col,')) DAY),' ,"'", @selectFormat,"'",')'  , ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' Group by ','DATE_FORMAT(',pivot_col,',',"'" , @selectFormat,"'" ,')', ' ORDER BY ',pivot_col);
    ELSEIF summarized_criteria = 'quaterly' 
	THEN 
	Set @quaterlySelectCriteria = CONCAT('CONCAT(', 'YEAR(',pivot_col,'),','''-''',',QUARTER(',pivot_col,')'  ,')');
	Set @quaterlyGroupbyCriteria = CONCAT('YEAR(',pivot_col,'),', 'QUARTER(',pivot_col,')' );
	SET @subq = CONCAT('SELECT DISTINCT ',@quaterlySelectCriteria  , ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' Group by ',@quaterlyGroupbyCriteria, ' ORDER BY ',@quaterlyGroupbyCriteria);
    ELSE
     SET @subq = CONCAT('SELECT DISTINCT ', 'DATE_FORMAT(',pivot_col,',', "'", @selectFormat,"'",')'  , ' AS val ',
                    ' FROM ', tbl_name, ' ', where_clause, ' Group by ','DATE_FORMAT(',pivot_col,',',"'" , @selectFormat,"'" ,')', ' ORDER BY 1');
	 END IF;
   -- select @subq;
    IF summarized_criteria = 'weekly' 
	THEN
		SET @updatedPivotColumn = CONCAT('DATE_FORMAT(DATE_ADD(',pivot_col,',','INTERVAL(1-DAYOFWEEK(',pivot_col,')) DAY),' ,"''", @selectFormat,"''",')');
	ELSEIF summarized_criteria = 'quaterly' 
	THEN
		SET @updatedPivotColumn = CONCAT('CONCAT(', 'YEAR(',pivot_col,'),',"''-''",',QUARTER(',pivot_col,')'  ,')');
    ELSE
	SET @updatedPivotColumn = CONCAT('DATE_FORMAT(',pivot_col,',', "''", @selectFormat,"''",')');
    END IF;
    -- select @updatedPivotColumn;
    SET @cc1 = "CONCAT('SUM(IF(&p = ', &v, ', &t, 0)) AS ', &v)";
   -- select @cc1;
    SET @cc2 = REPLACE(@cc1, '&p' ,@updatedPivotColumn );
    -- select @cc1, @cc2;
    SET @cc3 = REPLACE(@cc2, '&t', tally_col);
    -- select @cc2, @cc3;
    SET @qval = CONCAT("'\"', val, '\"'");
    -- select @qval;
    SET @cc4 = REPLACE(@cc3, '&v', @qval);
    -- select @cc4;
    SET SESSION group_concat_max_len = 10000;   -- just in case
    SET @stmt = CONCAT(
            'SELECT  GROUP_CONCAT(', @cc4, ' SEPARATOR ",\n")  INTO @sums',
            ' FROM ( ', @subq, ' ) AS top');
   -- select @stmt;
    -- select @sums;
    PREPARE _sql FROM @stmt;
    EXECUTE _sql;                      -- Intermediate step: build SQL for columns
    DEALLOCATE PREPARE _sql;
    -- Construct the query and perform it
    SET @stmt2 = CONCAT(
            'SELECT  ',
                main_base_cols, ',\n',
                @sums, ',\n',base_cols,
            '\n FROM ', tbl_name, ' ',
            where_clause,
           ' GROUP BY ', group_by, ' WITH ROLLUP',
           -- ' GROUP BY ', group_by, ',',@updatedPivotColumn , ' WITH ROLLUP',
            '\n', order_by
        );
   --  select @stmt2;                    -- The statement that generates the result
    PREPARE _sql FROM @stmt2;
    EXECUTE _sql;                     -- The resulting pivot table ouput
    DEALLOCATE PREPARE _sql;
    -- For debugging / tweaking, SELECT the various @variables after CALLing.
    END$$

DELIMITER ;