package com.dowhile;

// Generated Dec 5, 2017 5:08:49 PM by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * ContactPayments generated by hbm2java
 */
@Entity
@Table(name = "contact_payments")
public class ContactPayments implements java.io.Serializable {

	private Integer contactPaymentId;
	private Company company;
	private ContactPaymentsType contactPaymentsType;
	private Contact contact;
	private String contactName;
	private BigDecimal paymentAmount;
	private BigDecimal contactBalance;
	private BigDecimal paymentCash;
	private BigDecimal paymentCreditCard;
	private BigDecimal paymentOtherType;
	private BigDecimal contactNewBalance;
	private String description;
	private String paymentRefNum;
	private String orderRefNum;
	private String adjustmentType;
	private boolean activeIndicator;
	private Date createdDate;
	private Date lastUpdated;
	private Integer createdBy;
	private Integer updatedBy;

	public ContactPayments() {
	}

	public ContactPayments(Company company, String contactName,
			boolean activeIndicator, Date createdDate, Date lastUpdated) {
		this.company = company;
		this.contactName = contactName;
		this.activeIndicator = activeIndicator;
		this.createdDate = createdDate;
		this.lastUpdated = lastUpdated;
	}

	public ContactPayments(Company company,
			ContactPaymentsType contactPaymentsType, Contact contact,
			String contactName, BigDecimal paymentAmount,
			BigDecimal contactBalance, BigDecimal paymentCash,
			BigDecimal paymentCreditCard, BigDecimal paymentOtherType,
			BigDecimal contactNewBalance, String description,
			String paymentRefNum, String orderRefNum, String adjustmentType,
			boolean activeIndicator, Date createdDate, Date lastUpdated,
			Integer createdBy, Integer updatedBy) {
		this.company = company;
		this.contactPaymentsType = contactPaymentsType;
		this.contact = contact;
		this.contactName = contactName;
		this.paymentAmount = paymentAmount;
		this.contactBalance = contactBalance;
		this.paymentCash = paymentCash;
		this.paymentCreditCard = paymentCreditCard;
		this.paymentOtherType = paymentOtherType;
		this.contactNewBalance = contactNewBalance;
		this.description = description;
		this.paymentRefNum = paymentRefNum;
		this.orderRefNum = orderRefNum;
		this.adjustmentType = adjustmentType;
		this.activeIndicator = activeIndicator;
		this.createdDate = createdDate;
		this.lastUpdated = lastUpdated;
		this.createdBy = createdBy;
		this.updatedBy = updatedBy;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "CONTACT_PAYMENT_ID", unique = true, nullable = false)
	public Integer getContactPaymentId() {
		return this.contactPaymentId;
	}

	public void setContactPaymentId(Integer contactPaymentId) {
		this.contactPaymentId = contactPaymentId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COMPANY_ASSOCIATION_ID", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CONTACT_PAYMENT_TYPE_ASSOCICATION_ID")
	public ContactPaymentsType getContactPaymentsType() {
		return this.contactPaymentsType;
	}

	public void setContactPaymentsType(ContactPaymentsType contactPaymentsType) {
		this.contactPaymentsType = contactPaymentsType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CONTACT_ASSOCICATION_ID")
	public Contact getContact() {
		return this.contact;
	}

	public void setContact(Contact contact) {
		this.contact = contact;
	}

	@Column(name = "CONTACT_NAME", nullable = false, length = 200)
	public String getContactName() {
		return this.contactName;
	}

	public void setContactName(String contactName) {
		this.contactName = contactName;
	}

	@Column(name = "PAYMENT_AMOUNT", precision = 20, scale = 5)
	public BigDecimal getPaymentAmount() {
		return this.paymentAmount;
	}

	public void setPaymentAmount(BigDecimal paymentAmount) {
		this.paymentAmount = paymentAmount;
	}

	@Column(name = "CONTACT_BALANCE", precision = 20, scale = 5)
	public BigDecimal getContactBalance() {
		return this.contactBalance;
	}

	public void setContactBalance(BigDecimal contactBalance) {
		this.contactBalance = contactBalance;
	}

	@Column(name = "PAYMENT_CASH", precision = 20, scale = 5)
	public BigDecimal getPaymentCash() {
		return this.paymentCash;
	}

	public void setPaymentCash(BigDecimal paymentCash) {
		this.paymentCash = paymentCash;
	}

	@Column(name = "PAYMENT_CREDIT_CARD", precision = 20, scale = 5)
	public BigDecimal getPaymentCreditCard() {
		return this.paymentCreditCard;
	}

	public void setPaymentCreditCard(BigDecimal paymentCreditCard) {
		this.paymentCreditCard = paymentCreditCard;
	}

	@Column(name = "PAYMENT_OTHER_TYPE", precision = 20, scale = 5)
	public BigDecimal getPaymentOtherType() {
		return this.paymentOtherType;
	}

	public void setPaymentOtherType(BigDecimal paymentOtherType) {
		this.paymentOtherType = paymentOtherType;
	}

	@Column(name = "CONTACT_NEW_BALANCE", precision = 20, scale = 5)
	public BigDecimal getContactNewBalance() {
		return this.contactNewBalance;
	}

	public void setContactNewBalance(BigDecimal contactNewBalance) {
		this.contactNewBalance = contactNewBalance;
	}

	@Column(name = "DESCRIPTION", length = 1000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "PAYMENT_REF_NUM", length = 100)
	public String getPaymentRefNum() {
		return this.paymentRefNum;
	}

	public void setPaymentRefNum(String paymentRefNum) {
		this.paymentRefNum = paymentRefNum;
	}

	@Column(name = "ORDER_REF_NUM", length = 100)
	public String getOrderRefNum() {
		return this.orderRefNum;
	}

	public void setOrderRefNum(String orderRefNum) {
		this.orderRefNum = orderRefNum;
	}

	@Column(name = "ADJUSTMENT_TYPE", length = 100)
	public String getAdjustmentType() {
		return this.adjustmentType;
	}

	public void setAdjustmentType(String adjustmentType) {
		this.adjustmentType = adjustmentType;
	}

	@Column(name = "ACTIVE_INDICATOR", nullable = false)
	public boolean isActiveIndicator() {
		return this.activeIndicator;
	}

	public void setActiveIndicator(boolean activeIndicator) {
		this.activeIndicator = activeIndicator;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_DATE", nullable = false, length = 19)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_UPDATED", nullable = false, length = 19)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Column(name = "CREATED_BY")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "UPDATED_BY")
	public Integer getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(Integer updatedBy) {
		this.updatedBy = updatedBy;
	}

}
