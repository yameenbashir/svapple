package com.dowhile;
// Generated Aug 17, 2017 1:48:25 PM by Hibernate Tools 3.4.0.CR1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Ticket generated by hbm2java
 */
@Entity
@Table(name="ticket"
    ,catalog="ecom"
)
public class Ticket  implements java.io.Serializable {


     private Integer ticketId;
     private User userByCreatedBy;
     private Company company;
     private Severity severity;
     private User userByResolvedBy;
     private String description;
     private byte[] ticketDetail;
     private String ticketStatus;
     private String reOpen;
     private int reOpenCount;
     private Date resolvedDate;
     private Date createdDate;
     private Date lastUpdated;
     private Set<TicketActivity> ticketActivities = new HashSet<TicketActivity>(0);

    public Ticket() {
    }

	
    public Ticket(User userByCreatedBy, Company company, Severity severity, String description, byte[] ticketDetail, String ticketStatus, String reOpen, int reOpenCount, Date createdDate, Date lastUpdated) {
        this.userByCreatedBy = userByCreatedBy;
        this.company = company;
        this.severity = severity;
        this.description = description;
        this.ticketDetail = ticketDetail;
        this.ticketStatus = ticketStatus;
        this.reOpen = reOpen;
        this.reOpenCount = reOpenCount;
        this.createdDate = createdDate;
        this.lastUpdated = lastUpdated;
    }
    public Ticket(User userByCreatedBy, Company company, Severity severity, User userByResolvedBy, String description, byte[] ticketDetail, String ticketStatus, String reOpen, int reOpenCount, Date resolvedDate, Date createdDate, Date lastUpdated, Set<TicketActivity> ticketActivities) {
       this.userByCreatedBy = userByCreatedBy;
       this.company = company;
       this.severity = severity;
       this.userByResolvedBy = userByResolvedBy;
       this.description = description;
       this.ticketDetail = ticketDetail;
       this.ticketStatus = ticketStatus;
       this.reOpen = reOpen;
       this.reOpenCount = reOpenCount;
       this.resolvedDate = resolvedDate;
       this.createdDate = createdDate;
       this.lastUpdated = lastUpdated;
       this.ticketActivities = ticketActivities;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="TICKET_ID", unique=true, nullable=false)
    public Integer getTicketId() {
        return this.ticketId;
    }
    
    public void setTicketId(Integer ticketId) {
        this.ticketId = ticketId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CREATED_BY", nullable=false)
    public User getUserByCreatedBy() {
        return this.userByCreatedBy;
    }
    
    public void setUserByCreatedBy(User userByCreatedBy) {
        this.userByCreatedBy = userByCreatedBy;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="COMPANY_ASSOCIATION_ID", nullable=false)
    public Company getCompany() {
        return this.company;
    }
    
    public void setCompany(Company company) {
        this.company = company;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="SEVERITY_ASSOCIATION_ID", nullable=false)
    public Severity getSeverity() {
        return this.severity;
    }
    
    public void setSeverity(Severity severity) {
        this.severity = severity;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="RESOLVED_BY")
    public User getUserByResolvedBy() {
        return this.userByResolvedBy;
    }
    
    public void setUserByResolvedBy(User userByResolvedBy) {
        this.userByResolvedBy = userByResolvedBy;
    }

    
    @Column(name="DESCRIPTION", nullable=false, length=256)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }

    
    @Column(name="TICKET_DETAIL", nullable=false)
    public byte[] getTicketDetail() {
        return this.ticketDetail;
    }
    
    public void setTicketDetail(byte[] ticketDetail) {
        this.ticketDetail = ticketDetail;
    }

    
    @Column(name="TICKET_STATUS", nullable=false, length=256)
    public String getTicketStatus() {
        return this.ticketStatus;
    }
    
    public void setTicketStatus(String ticketStatus) {
        this.ticketStatus = ticketStatus;
    }

    
    @Column(name="RE_OPEN", nullable=false, length=256)
    public String getReOpen() {
        return this.reOpen;
    }
    
    public void setReOpen(String reOpen) {
        this.reOpen = reOpen;
    }

    
    @Column(name="RE_OPEN_COUNT", nullable=false)
    public int getReOpenCount() {
        return this.reOpenCount;
    }
    
    public void setReOpenCount(int reOpenCount) {
        this.reOpenCount = reOpenCount;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="RESOLVED_DATE", length=19)
    public Date getResolvedDate() {
        return this.resolvedDate;
    }
    
    public void setResolvedDate(Date resolvedDate) {
        this.resolvedDate = resolvedDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATED_DATE", nullable=false, length=19)
    public Date getCreatedDate() {
        return this.createdDate;
    }
    
    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="LAST_UPDATED", nullable=false, length=19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }
    
    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="ticket")
    public Set<TicketActivity> getTicketActivities() {
        return this.ticketActivities;
    }
    
    public void setTicketActivities(Set<TicketActivity> ticketActivities) {
        this.ticketActivities = ticketActivities;
    }




}


