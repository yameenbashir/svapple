package com.dowhile;
// Generated Aug 17, 2017 1:48:25 PM by Hibernate Tools 3.4.0.CR1


import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * SalesTax generated by hbm2java
 */
@Entity
@Table(name="sales_tax"
    ,catalog="ecom"
)
public class SalesTax  implements java.io.Serializable {


    private Integer salesTaxId;
    private Company company;
    private String salesTaxName;
    private Double salesTaxPercentage;
    private Date effectiveDate;
    private boolean activeIndicator;
    private Date createdDate;
    private Date lastUpdated;
    private Integer createdBy;
    private Integer updatedBy;
    private Set<ProductPriceHistory> productPriceHistories = new HashSet<ProductPriceHistory>(0);
    private Set<Product> products = new HashSet<Product>(0);
    private Set<Outlet> outlets = new HashSet<Outlet>(0);
    private Set<ChartOfAccount> chartOfAccounts = new HashSet<ChartOfAccount>(0);
    private Set<PriceBookDetail> priceBookDetails = new HashSet<PriceBookDetail>(0);
    private Set<ProductVariant> productVariants = new HashSet<ProductVariant>(0);

   public SalesTax() {
   }

	
   public SalesTax(Company company, Date effectiveDate, boolean activeIndicator, Date createdDate, Date lastUpdated) {
       this.company = company;
       this.effectiveDate = effectiveDate;
       this.activeIndicator = activeIndicator;
       this.createdDate = createdDate;
       this.lastUpdated = lastUpdated;
   }
   public SalesTax(Company company, String salesTaxName, Double salesTaxPercentage, Date effectiveDate, boolean activeIndicator, Date createdDate, Date lastUpdated, Integer createdBy, Integer updatedBy, Set<ProductPriceHistory> productPriceHistories, Set<Product> products, Set<Outlet> outlets, Set<ChartOfAccount> chartOfAccounts, Set<PriceBookDetail> priceBookDetails, Set<ProductVariant> productVariants) {
      this.company = company;
      this.salesTaxName = salesTaxName;
      this.salesTaxPercentage = salesTaxPercentage;
      this.effectiveDate = effectiveDate;
      this.activeIndicator = activeIndicator;
      this.createdDate = createdDate;
      this.lastUpdated = lastUpdated;
      this.createdBy = createdBy;
      this.updatedBy = updatedBy;
      this.productPriceHistories = productPriceHistories;
      this.products = products;
      this.outlets = outlets;
      this.chartOfAccounts = chartOfAccounts;
      this.priceBookDetails = priceBookDetails;
      this.productVariants = productVariants;
   }
  
    @Id @GeneratedValue(strategy=IDENTITY)

   
   @Column(name="SALES_TAX_ID", unique=true, nullable=false)
   public Integer getSalesTaxId() {
       return this.salesTaxId;
   }
   
   public void setSalesTaxId(Integer salesTaxId) {
       this.salesTaxId = salesTaxId;
   }

@ManyToOne(fetch=FetchType.LAZY)
   @JoinColumn(name="COMPANY_ASSOCIATION_ID", nullable=false)
   public Company getCompany() {
       return this.company;
   }
   
   public void setCompany(Company company) {
       this.company = company;
   }

   
   @Column(name="SALES_TAX_NAME", length=100)
   public String getSalesTaxName() {
       return this.salesTaxName;
   }
   
   public void setSalesTaxName(String salesTaxName) {
       this.salesTaxName = salesTaxName;
   }

   
   @Column(name="SALES_TAX_PERCENTAGE", precision=22, scale=0)
   public Double getSalesTaxPercentage() {
       return this.salesTaxPercentage;
   }
   
   public void setSalesTaxPercentage(Double salesTaxPercentage) {
       this.salesTaxPercentage = salesTaxPercentage;
   }

   @Temporal(TemporalType.DATE)
   @Column(name="EFFECTIVE_DATE", nullable=false, length=10)
   public Date getEffectiveDate() {
       return this.effectiveDate;
   }
   
   public void setEffectiveDate(Date effectiveDate) {
       this.effectiveDate = effectiveDate;
   }

   
   @Column(name="ACTIVE_INDICATOR", nullable=false)
   public boolean isActiveIndicator() {
       return this.activeIndicator;
   }
   
   public void setActiveIndicator(boolean activeIndicator) {
       this.activeIndicator = activeIndicator;
   }

   @Temporal(TemporalType.TIMESTAMP)
   @Column(name="CREATED_DATE", nullable=false, length=19)
   public Date getCreatedDate() {
       return this.createdDate;
   }
   
   public void setCreatedDate(Date createdDate) {
       this.createdDate = createdDate;
   }

   @Temporal(TemporalType.TIMESTAMP)
   @Column(name="LAST_UPDATED", nullable=false, length=19)
   public Date getLastUpdated() {
       return this.lastUpdated;
   }
   
   public void setLastUpdated(Date lastUpdated) {
       this.lastUpdated = lastUpdated;
   }

   
   @Column(name="CREATED_BY")
   public Integer getCreatedBy() {
       return this.createdBy;
   }
   
   public void setCreatedBy(Integer createdBy) {
       this.createdBy = createdBy;
   }

   
   @Column(name="UPDATED_BY")
   public Integer getUpdatedBy() {
       return this.updatedBy;
   }
   
   public void setUpdatedBy(Integer updatedBy) {
       this.updatedBy = updatedBy;
   }

@OneToMany(fetch=FetchType.LAZY, mappedBy="salesTax")
   public Set<ProductPriceHistory> getProductPriceHistories() {
       return this.productPriceHistories;
   }
   
   public void setProductPriceHistories(Set<ProductPriceHistory> productPriceHistories) {
       this.productPriceHistories = productPriceHistories;
   }

@OneToMany(fetch=FetchType.LAZY, mappedBy="salesTax")
   public Set<Product> getProducts() {
       return this.products;
   }
   
   public void setProducts(Set<Product> products) {
       this.products = products;
   }

@OneToMany(fetch=FetchType.LAZY, mappedBy="salesTax")
   public Set<Outlet> getOutlets() {
       return this.outlets;
   }
   
   public void setOutlets(Set<Outlet> outlets) {
       this.outlets = outlets;
   }

@OneToMany(fetch=FetchType.LAZY, mappedBy="salesTax")
   public Set<ChartOfAccount> getChartOfAccounts() {
       return this.chartOfAccounts;
   }
   
   public void setChartOfAccounts(Set<ChartOfAccount> chartOfAccounts) {
       this.chartOfAccounts = chartOfAccounts;
   }

@OneToMany(fetch=FetchType.LAZY, mappedBy="salesTax")
   public Set<PriceBookDetail> getPriceBookDetails() {
       return this.priceBookDetails;
   }
   
   public void setPriceBookDetails(Set<PriceBookDetail> priceBookDetails) {
       this.priceBookDetails = priceBookDetails;
   }

@OneToMany(fetch=FetchType.LAZY, mappedBy="salesTax")
   public Set<ProductVariant> getProductVariants() {
       return this.productVariants;
   }
   
   public void setProductVariants(Set<ProductVariant> productVariants) {
       this.productVariants = productVariants;
   }




}


