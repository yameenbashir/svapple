package com.dowhile;
// Generated Aug 17, 2017 1:48:25 PM by Hibernate Tools 3.4.0.CR1


import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * DailyRegister generated by hbm2java
 */
@Entity
@Table(name="daily_register"
    ,catalog="ecom"
)
public class DailyRegister  implements java.io.Serializable {


     private Integer dailyRegisterId;
     private Outlet outlet;
     private Company company;
     private Status status;
     private Register register;
     private BigDecimal creditCardAmtActual;
     private BigDecimal creditCardAmtExpected;
     private BigDecimal creditCardAmtDifference;
     private BigDecimal cashAmtActual;
     private BigDecimal cashAmtExpected;
     private BigDecimal cashAmtDifference;
     private BigDecimal storeCreditAmtActual;
     private BigDecimal storeCreditAmtExpected;
     private BigDecimal storeCreditAmtDifference;
     private BigDecimal actualAmt;
     private String registerOpeningNotes;
     private String registerClosingNotes;
     private boolean activeIndicator;
     private Date createdDate;
     private Date closedDate;
     private Date lastUpdated;
     private Integer createdBy;
     private Integer updatedBy;
     private Set<Receipt> receipts = new HashSet<Receipt>(0);
     private Set<InvoiceMain> invoiceMains = new HashSet<InvoiceMain>(0);
     private Set<CashManagment> cashManagments = new HashSet<CashManagment>(0);

    public DailyRegister() {
    }

	
    public DailyRegister(Company company, Status status, Register register, boolean activeIndicator, Date createdDate, Date closedDate, Date lastUpdated) {
        this.company = company;
        this.status = status;
        this.register = register;
        this.activeIndicator = activeIndicator;
        this.createdDate = createdDate;
        this.closedDate = closedDate;
        this.lastUpdated = lastUpdated;
    }
    public DailyRegister(Outlet outlet, Company company, Status status, Register register, BigDecimal creditCardAmtActual, BigDecimal creditCardAmtExpected, BigDecimal creditCardAmtDifference, BigDecimal cashAmtActual, BigDecimal cashAmtExpected, BigDecimal cashAmtDifference, BigDecimal storeCreditAmtActual, BigDecimal storeCreditAmtExpected, BigDecimal storeCreditAmtDifference, BigDecimal actualAmt, String registerOpeningNotes, String registerClosingNotes, boolean activeIndicator, Date createdDate, Date closedDate, Date lastUpdated, Integer createdBy, Integer updatedBy, Set<Receipt> receipts, Set<InvoiceMain> invoiceMains, Set<CashManagment> cashManagments) {
       this.outlet = outlet;
       this.company = company;
       this.status = status;
       this.register = register;
       this.creditCardAmtActual = creditCardAmtActual;
       this.creditCardAmtExpected = creditCardAmtExpected;
       this.creditCardAmtDifference = creditCardAmtDifference;
       this.cashAmtActual = cashAmtActual;
       this.cashAmtExpected = cashAmtExpected;
       this.cashAmtDifference = cashAmtDifference;
       this.storeCreditAmtActual = storeCreditAmtActual;
       this.storeCreditAmtExpected = storeCreditAmtExpected;
       this.storeCreditAmtDifference = storeCreditAmtDifference;
       this.actualAmt = actualAmt;
       this.registerOpeningNotes = registerOpeningNotes;
       this.registerClosingNotes = registerClosingNotes;
       this.activeIndicator = activeIndicator;
       this.createdDate = createdDate;
       this.closedDate = closedDate;
       this.lastUpdated = lastUpdated;
       this.createdBy = createdBy;
       this.updatedBy = updatedBy;
       this.receipts = receipts;
       this.invoiceMains = invoiceMains;
       this.cashManagments = cashManagments;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="DAILY_REGISTER_ID", unique=true, nullable=false)
    public Integer getDailyRegisterId() {
        return this.dailyRegisterId;
    }
    
    public void setDailyRegisterId(Integer dailyRegisterId) {
        this.dailyRegisterId = dailyRegisterId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="OUTLET_ASSOCICATION_ID")
    public Outlet getOutlet() {
        return this.outlet;
    }
    
    public void setOutlet(Outlet outlet) {
        this.outlet = outlet;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="COMPANY_ASSOCIATION_ID", nullable=false)
    public Company getCompany() {
        return this.company;
    }
    
    public void setCompany(Company company) {
        this.company = company;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="STATUS_ASSOCICATION_ID", nullable=false)
    public Status getStatus() {
        return this.status;
    }
    
    public void setStatus(Status status) {
        this.status = status;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="REGISTER_ASSOCICATION_ID", nullable=false)
    public Register getRegister() {
        return this.register;
    }
    
    public void setRegister(Register register) {
        this.register = register;
    }

    
    @Column(name="CREDIT_CARD_AMT_ACTUAL", precision=20)
    public BigDecimal getCreditCardAmtActual() {
        return this.creditCardAmtActual;
    }
    
    public void setCreditCardAmtActual(BigDecimal creditCardAmtActual) {
        this.creditCardAmtActual = creditCardAmtActual;
    }

    
    @Column(name="CREDIT_CARD_AMT_EXPECTED", precision=20)
    public BigDecimal getCreditCardAmtExpected() {
        return this.creditCardAmtExpected;
    }
    
    public void setCreditCardAmtExpected(BigDecimal creditCardAmtExpected) {
        this.creditCardAmtExpected = creditCardAmtExpected;
    }

    
    @Column(name="CREDIT_CARD_AMT_DIFFERENCE", precision=20)
    public BigDecimal getCreditCardAmtDifference() {
        return this.creditCardAmtDifference;
    }
    
    public void setCreditCardAmtDifference(BigDecimal creditCardAmtDifference) {
        this.creditCardAmtDifference = creditCardAmtDifference;
    }

    
    @Column(name="CASH_AMT_ACTUAL", precision=20)
    public BigDecimal getCashAmtActual() {
        return this.cashAmtActual;
    }
    
    public void setCashAmtActual(BigDecimal cashAmtActual) {
        this.cashAmtActual = cashAmtActual;
    }

    
    @Column(name="CASH_AMT_EXPECTED", precision=20)
    public BigDecimal getCashAmtExpected() {
        return this.cashAmtExpected;
    }
    
    public void setCashAmtExpected(BigDecimal cashAmtExpected) {
        this.cashAmtExpected = cashAmtExpected;
    }

    
    @Column(name="CASH_AMT_DIFFERENCE", precision=20)
    public BigDecimal getCashAmtDifference() {
        return this.cashAmtDifference;
    }
    
    public void setCashAmtDifference(BigDecimal cashAmtDifference) {
        this.cashAmtDifference = cashAmtDifference;
    }

    
    @Column(name="STORE_CREDIT_AMT_ACTUAL", precision=20)
    public BigDecimal getStoreCreditAmtActual() {
        return this.storeCreditAmtActual;
    }
    
    public void setStoreCreditAmtActual(BigDecimal storeCreditAmtActual) {
        this.storeCreditAmtActual = storeCreditAmtActual;
    }

    
    @Column(name="STORE_CREDIT_AMT_EXPECTED", precision=20)
    public BigDecimal getStoreCreditAmtExpected() {
        return this.storeCreditAmtExpected;
    }
    
    public void setStoreCreditAmtExpected(BigDecimal storeCreditAmtExpected) {
        this.storeCreditAmtExpected = storeCreditAmtExpected;
    }

    
    @Column(name="STORE_CREDIT_AMT_DIFFERENCE", precision=20)
    public BigDecimal getStoreCreditAmtDifference() {
        return this.storeCreditAmtDifference;
    }
    
    public void setStoreCreditAmtDifference(BigDecimal storeCreditAmtDifference) {
        this.storeCreditAmtDifference = storeCreditAmtDifference;
    }

    
    @Column(name="ACTUAL_AMT", precision=20)
    public BigDecimal getActualAmt() {
        return this.actualAmt;
    }
    
    public void setActualAmt(BigDecimal actualAmt) {
        this.actualAmt = actualAmt;
    }

    
    @Column(name="REGISTER_OPENING_NOTES", length=256)
    public String getRegisterOpeningNotes() {
        return this.registerOpeningNotes;
    }
    
    public void setRegisterOpeningNotes(String registerOpeningNotes) {
        this.registerOpeningNotes = registerOpeningNotes;
    }

    
    @Column(name="REGISTER_CLOSING_NOTES", length=256)
    public String getRegisterClosingNotes() {
        return this.registerClosingNotes;
    }
    
    public void setRegisterClosingNotes(String registerClosingNotes) {
        this.registerClosingNotes = registerClosingNotes;
    }

    
    @Column(name="ACTIVE_INDICATOR", nullable=false)
    public boolean isActiveIndicator() {
        return this.activeIndicator;
    }
    
    public void setActiveIndicator(boolean activeIndicator) {
        this.activeIndicator = activeIndicator;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATED_DATE", nullable=false, length=19)
    public Date getCreatedDate() {
        return this.createdDate;
    }
    
    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CLOSED_DATE", nullable=false, length=19)
    public Date getClosedDate() {
        return this.closedDate;
    }
    
    public void setClosedDate(Date closedDate) {
        this.closedDate = closedDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="LAST_UPDATED", nullable=false, length=19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }
    
    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    
    @Column(name="CREATED_BY")
    public Integer getCreatedBy() {
        return this.createdBy;
    }
    
    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    
    @Column(name="UPDATED_BY")
    public Integer getUpdatedBy() {
        return this.updatedBy;
    }
    
    public void setUpdatedBy(Integer updatedBy) {
        this.updatedBy = updatedBy;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="dailyRegister")
    public Set<Receipt> getReceipts() {
        return this.receipts;
    }
    
    public void setReceipts(Set<Receipt> receipts) {
        this.receipts = receipts;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="dailyRegister")
    public Set<InvoiceMain> getInvoiceMains() {
        return this.invoiceMains;
    }
    
    public void setInvoiceMains(Set<InvoiceMain> invoiceMains) {
        this.invoiceMains = invoiceMains;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="dailyRegister")
    public Set<CashManagment> getCashManagments() {
        return this.cashManagments;
    }
    
    public void setCashManagments(Set<CashManagment> cashManagments) {
        this.cashManagments = cashManagments;
    }




}


