package com.dowhile;
// Generated Aug 17, 2017 1:48:25 PM by Hibernate Tools 3.4.0.CR1


import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PriceBookDetail generated by hbm2java
 */
@Entity
@Table(name="price_book_detail"
    ,catalog="ecom"
)
public class PriceBookDetail  implements java.io.Serializable {


     private Integer priceBookDetailId;
     private SalesTax salesTax;
     private User userByCreatedBy;
     private ProductVariant productVariant;
     private User userByUpdatedBy;
     private Product product;
     private Company company;
     private PriceBook priceBook;
     private BigDecimal supplyPrice;
     private BigDecimal markup;
     private BigDecimal discount;
     private Integer minUnits;
     private Integer maxUnits;
     private boolean activeIndicator;
     private Date createdDate;
     private Date lastUpdated;
     private String uuid;

    public PriceBookDetail() {
    }

	
    public PriceBookDetail(SalesTax salesTax, User userByCreatedBy, User userByUpdatedBy, Product product, Company company, PriceBook priceBook, BigDecimal supplyPrice, BigDecimal markup, BigDecimal discount, boolean activeIndicator, Date createdDate, Date lastUpdated, String uuid) {
        this.salesTax = salesTax;
        this.userByCreatedBy = userByCreatedBy;
        this.userByUpdatedBy = userByUpdatedBy;
        this.product = product;
        this.company = company;
        this.priceBook = priceBook;
        this.supplyPrice = supplyPrice;
        this.markup = markup;
        this.discount = discount;
        this.activeIndicator = activeIndicator;
        this.createdDate = createdDate;
        this.lastUpdated = lastUpdated;
        this.uuid = uuid;
    }
    public PriceBookDetail(SalesTax salesTax, User userByCreatedBy, ProductVariant productVariant, User userByUpdatedBy, Product product, Company company, PriceBook priceBook, BigDecimal supplyPrice, BigDecimal markup, BigDecimal discount, Integer minUnits, Integer maxUnits, boolean activeIndicator, Date createdDate, Date lastUpdated, String uuid) {
       this.salesTax = salesTax;
       this.userByCreatedBy = userByCreatedBy;
       this.productVariant = productVariant;
       this.userByUpdatedBy = userByUpdatedBy;
       this.product = product;
       this.company = company;
       this.priceBook = priceBook;
       this.supplyPrice = supplyPrice;
       this.markup = markup;
       this.discount = discount;
       this.minUnits = minUnits;
       this.maxUnits = maxUnits;
       this.activeIndicator = activeIndicator;
       this.createdDate = createdDate;
       this.lastUpdated = lastUpdated;
       this.uuid = uuid;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="PRICE_BOOK_DETAIL_ID", unique=true, nullable=false)
    public Integer getPriceBookDetailId() {
        return this.priceBookDetailId;
    }
    
    public void setPriceBookDetailId(Integer priceBookDetailId) {
        this.priceBookDetailId = priceBookDetailId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="SALES_TAX_ASSOCIATION_ID", nullable=false)
    public SalesTax getSalesTax() {
        return this.salesTax;
    }
    
    public void setSalesTax(SalesTax salesTax) {
        this.salesTax = salesTax;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="CREATED_BY", nullable=false)
    public User getUserByCreatedBy() {
        return this.userByCreatedBy;
    }
    
    public void setUserByCreatedBy(User userByCreatedBy) {
        this.userByCreatedBy = userByCreatedBy;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="PRODUCT_VARIENT_ASSOCICATION_ID")
    public ProductVariant getProductVariant() {
        return this.productVariant;
    }
    
    public void setProductVariant(ProductVariant productVariant) {
        this.productVariant = productVariant;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="UPDATED_BY", nullable=false)
    public User getUserByUpdatedBy() {
        return this.userByUpdatedBy;
    }
    
    public void setUserByUpdatedBy(User userByUpdatedBy) {
        this.userByUpdatedBy = userByUpdatedBy;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="PRODUCT_ASSOCICATION_ID", nullable=false)
    public Product getProduct() {
        return this.product;
    }
    
    public void setProduct(Product product) {
        this.product = product;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="COMPANY_ASSOCIATION_ID", nullable=false)
    public Company getCompany() {
        return this.company;
    }
    
    public void setCompany(Company company) {
        this.company = company;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="PRICE_BOOK_ASSOCICATION_ID", nullable=false)
    public PriceBook getPriceBook() {
        return this.priceBook;
    }
    
    public void setPriceBook(PriceBook priceBook) {
        this.priceBook = priceBook;
    }

    
    @Column(name="SUPPLY_PRICE", nullable=false, precision=20)
    public BigDecimal getSupplyPrice() {
        return this.supplyPrice;
    }
    
    public void setSupplyPrice(BigDecimal supplyPrice) {
        this.supplyPrice = supplyPrice;
    }

    
    @Column(name="MARKUP", nullable=false, precision=8, scale=5)
    public BigDecimal getMarkup() {
        return this.markup;
    }
    
    public void setMarkup(BigDecimal markup) {
        this.markup = markup;
    }

    
    @Column(name="DISCOUNT", nullable=false, precision=8, scale=5)
    public BigDecimal getDiscount() {
        return this.discount;
    }
    
    public void setDiscount(BigDecimal discount) {
        this.discount = discount;
    }

    
    @Column(name="MIN_UNITS")
    public Integer getMinUnits() {
        return this.minUnits;
    }
    
    public void setMinUnits(Integer minUnits) {
        this.minUnits = minUnits;
    }

    
    @Column(name="MAX_UNITS")
    public Integer getMaxUnits() {
        return this.maxUnits;
    }
    
    public void setMaxUnits(Integer maxUnits) {
        this.maxUnits = maxUnits;
    }

    
    @Column(name="ACTIVE_INDICATOR", nullable=false)
    public boolean isActiveIndicator() {
        return this.activeIndicator;
    }
    
    public void setActiveIndicator(boolean activeIndicator) {
        this.activeIndicator = activeIndicator;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATED_DATE", nullable=false, length=19)
    public Date getCreatedDate() {
        return this.createdDate;
    }
    
    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="LAST_UPDATED", nullable=false, length=19)
    public Date getLastUpdated() {
        return this.lastUpdated;
    }
    
    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    
    @Column(name="UUID", nullable=false, length=500)
    public String getUuid() {
        return this.uuid;
    }
    
    public void setUuid(String uuid) {
        this.uuid = uuid;
    }




}


